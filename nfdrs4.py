# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_nfdrs4')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_nfdrs4')
    _nfdrs4 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nfdrs4', [dirname(__file__)])
        except ImportError:
            import _nfdrs4
            return _nfdrs4
        try:
            _mod = imp.load_module('_nfdrs4', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _nfdrs4 = swig_import_helper()
    del swig_import_helper
else:
    import _nfdrs4
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nfdrs4.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _nfdrs4.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _nfdrs4.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _nfdrs4.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _nfdrs4.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _nfdrs4.SwigPyIterator_equal(self, x)

    def copy(self):
        return _nfdrs4.SwigPyIterator_copy(self)

    def next(self):
        return _nfdrs4.SwigPyIterator_next(self)

    def __next__(self):
        return _nfdrs4.SwigPyIterator___next__(self)

    def previous(self):
        return _nfdrs4.SwigPyIterator_previous(self)

    def advance(self, n):
        return _nfdrs4.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _nfdrs4.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _nfdrs4.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _nfdrs4.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _nfdrs4.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _nfdrs4.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _nfdrs4.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _nfdrs4.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

DFM_State_None = _nfdrs4.DFM_State_None
DFM_State_Adsorption = _nfdrs4.DFM_State_Adsorption
DFM_State_Desorption = _nfdrs4.DFM_State_Desorption
DFM_State_Condensation1 = _nfdrs4.DFM_State_Condensation1
DFM_State_Condensation2 = _nfdrs4.DFM_State_Condensation2
DFM_State_Evaporation = _nfdrs4.DFM_State_Evaporation
DFM_State_Rainfall1 = _nfdrs4.DFM_State_Rainfall1
DFM_State_Rainfall2 = _nfdrs4.DFM_State_Rainfall2
DFM_State_Rainstorm = _nfdrs4.DFM_State_Rainstorm
DFM_State_Stagnation = _nfdrs4.DFM_State_Stagnation
DFM_State_Error = _nfdrs4.DFM_State_Error
class DeadFuelMoisture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeadFuelMoisture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeadFuelMoisture, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _nfdrs4.delete_DeadFuelMoisture
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _nfdrs4.new_DeadFuelMoisture(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def className(self):
        return _nfdrs4.DeadFuelMoisture_className(self)
    if _newclass:
        createDeadFuelMoisture1 = staticmethod(_nfdrs4.DeadFuelMoisture_createDeadFuelMoisture1)
    else:
        createDeadFuelMoisture1 = _nfdrs4.DeadFuelMoisture_createDeadFuelMoisture1
    if _newclass:
        createDeadFuelMoisture10 = staticmethod(_nfdrs4.DeadFuelMoisture_createDeadFuelMoisture10)
    else:
        createDeadFuelMoisture10 = _nfdrs4.DeadFuelMoisture_createDeadFuelMoisture10
    if _newclass:
        createDeadFuelMoisture100 = staticmethod(_nfdrs4.DeadFuelMoisture_createDeadFuelMoisture100)
    else:
        createDeadFuelMoisture100 = _nfdrs4.DeadFuelMoisture_createDeadFuelMoisture100
    if _newclass:
        createDeadFuelMoisture1000 = staticmethod(_nfdrs4.DeadFuelMoisture_createDeadFuelMoisture1000)
    else:
        createDeadFuelMoisture1000 = _nfdrs4.DeadFuelMoisture_createDeadFuelMoisture1000
    if _newclass:
        deriveAdsorptionRate = staticmethod(_nfdrs4.DeadFuelMoisture_deriveAdsorptionRate)
    else:
        deriveAdsorptionRate = _nfdrs4.DeadFuelMoisture_deriveAdsorptionRate
    if _newclass:
        deriveDiffusivitySteps = staticmethod(_nfdrs4.DeadFuelMoisture_deriveDiffusivitySteps)
    else:
        deriveDiffusivitySteps = _nfdrs4.DeadFuelMoisture_deriveDiffusivitySteps
    if _newclass:
        deriveMoistureSteps = staticmethod(_nfdrs4.DeadFuelMoisture_deriveMoistureSteps)
    else:
        deriveMoistureSteps = _nfdrs4.DeadFuelMoisture_deriveMoistureSteps
    if _newclass:
        derivePlanarHeatTransferRate = staticmethod(_nfdrs4.DeadFuelMoisture_derivePlanarHeatTransferRate)
    else:
        derivePlanarHeatTransferRate = _nfdrs4.DeadFuelMoisture_derivePlanarHeatTransferRate
    if _newclass:
        deriveRainfallRunoffFactor = staticmethod(_nfdrs4.DeadFuelMoisture_deriveRainfallRunoffFactor)
    else:
        deriveRainfallRunoffFactor = _nfdrs4.DeadFuelMoisture_deriveRainfallRunoffFactor
    if _newclass:
        deriveStickNodes = staticmethod(_nfdrs4.DeadFuelMoisture_deriveStickNodes)
    else:
        deriveStickNodes = _nfdrs4.DeadFuelMoisture_deriveStickNodes
    if _newclass:
        uniformRandom = staticmethod(_nfdrs4.DeadFuelMoisture_uniformRandom)
    else:
        uniformRandom = _nfdrs4.DeadFuelMoisture_uniformRandom

    def initializeEnvironment(self, *args):
        return _nfdrs4.DeadFuelMoisture_initializeEnvironment(self, *args)

    def update(self, *args):
        return _nfdrs4.DeadFuelMoisture_update(self, *args)

    def zero(self):
        return _nfdrs4.DeadFuelMoisture_zero(self)

    def elapsedTime(self):
        return _nfdrs4.DeadFuelMoisture_elapsedTime(self)

    def initialized(self):
        return _nfdrs4.DeadFuelMoisture_initialized(self)

    def name(self):
        return _nfdrs4.DeadFuelMoisture_name(self)

    def meanMoisture(self):
        return _nfdrs4.DeadFuelMoisture_meanMoisture(self)

    def meanWtdMoisture(self):
        return _nfdrs4.DeadFuelMoisture_meanWtdMoisture(self)

    def medianRadialMoisture(self):
        return _nfdrs4.DeadFuelMoisture_medianRadialMoisture(self)

    def meanWtdTemperature(self):
        return _nfdrs4.DeadFuelMoisture_meanWtdTemperature(self)

    def pptRate(self):
        return _nfdrs4.DeadFuelMoisture_pptRate(self)

    def state(self):
        return _nfdrs4.DeadFuelMoisture_state(self)

    def stateName(self):
        return _nfdrs4.DeadFuelMoisture_stateName(self)

    def surfaceMoisture(self):
        return _nfdrs4.DeadFuelMoisture_surfaceMoisture(self)

    def surfaceTemperature(self):
        return _nfdrs4.DeadFuelMoisture_surfaceTemperature(self)

    def updates(self):
        return _nfdrs4.DeadFuelMoisture_updates(self)

    def adsorptionRate(self):
        return _nfdrs4.DeadFuelMoisture_adsorptionRate(self)

    def desorptionRate(self):
        return _nfdrs4.DeadFuelMoisture_desorptionRate(self)

    def diffusivitySteps(self):
        return _nfdrs4.DeadFuelMoisture_diffusivitySteps(self)

    def maximumLocalMoisture(self):
        return _nfdrs4.DeadFuelMoisture_maximumLocalMoisture(self)

    def moistureSteps(self):
        return _nfdrs4.DeadFuelMoisture_moistureSteps(self)

    def planarHeatTransferRate(self):
        return _nfdrs4.DeadFuelMoisture_planarHeatTransferRate(self)

    def rainfallRunoffFactor(self):
        return _nfdrs4.DeadFuelMoisture_rainfallRunoffFactor(self)

    def stickDensity(self):
        return _nfdrs4.DeadFuelMoisture_stickDensity(self)

    def stickLength(self):
        return _nfdrs4.DeadFuelMoisture_stickLength(self)

    def stickNodes(self):
        return _nfdrs4.DeadFuelMoisture_stickNodes(self)

    def waterFilmContribution(self):
        return _nfdrs4.DeadFuelMoisture_waterFilmContribution(self)

    def initializeStick(self):
        return _nfdrs4.DeadFuelMoisture_initializeStick(self)

    def setAdsorptionRate(self, adsorptionRate):
        return _nfdrs4.DeadFuelMoisture_setAdsorptionRate(self, adsorptionRate)

    def setAllowRainstorm(self, allow=True):
        return _nfdrs4.DeadFuelMoisture_setAllowRainstorm(self, allow)

    def setAllowRainfall2(self, allow=True):
        return _nfdrs4.DeadFuelMoisture_setAllowRainfall2(self, allow)

    def setDesorptionRate(self, desorptionRate=0.06):
        return _nfdrs4.DeadFuelMoisture_setDesorptionRate(self, desorptionRate)

    def setDiffusivitySteps(self, diffusivitySteps):
        return _nfdrs4.DeadFuelMoisture_setDiffusivitySteps(self, diffusivitySteps)

    def setMaximumLocalMoisture(self, localMaxMc=0.6):
        return _nfdrs4.DeadFuelMoisture_setMaximumLocalMoisture(self, localMaxMc)

    def setMoistureSteps(self, moistureSteps):
        return _nfdrs4.DeadFuelMoisture_setMoistureSteps(self, moistureSteps)

    def setPertubateColumn(self, pertubate=True):
        return _nfdrs4.DeadFuelMoisture_setPertubateColumn(self, pertubate)

    def setPlanarHeatTransferRate(self, planarHeatTransferRate):
        return _nfdrs4.DeadFuelMoisture_setPlanarHeatTransferRate(self, planarHeatTransferRate)

    def setRainfallRunoffFactor(self, rainfallRunoffFactor):
        return _nfdrs4.DeadFuelMoisture_setRainfallRunoffFactor(self, rainfallRunoffFactor)

    def setRandomSeed(self, randseed=0):
        return _nfdrs4.DeadFuelMoisture_setRandomSeed(self, randseed)

    def setRampRai0(self, ramp=True):
        return _nfdrs4.DeadFuelMoisture_setRampRai0(self, ramp)

    def setStickDensity(self, stickDensity=0.4):
        return _nfdrs4.DeadFuelMoisture_setStickDensity(self, stickDensity)

    def setStickLength(self, stickLength=41.0):
        return _nfdrs4.DeadFuelMoisture_setStickLength(self, stickLength)

    def setStickNodes(self, stickNodes=11):
        return _nfdrs4.DeadFuelMoisture_setStickNodes(self, stickNodes)

    def setWaterFilmContribution(self, waterFilm=0.0):
        return _nfdrs4.DeadFuelMoisture_setWaterFilmContribution(self, waterFilm)

    def setMoisture(self, initFM):
        return _nfdrs4.DeadFuelMoisture_setMoisture(self, initFM)

    def eqmc(self, fTemp, fRH):
        return _nfdrs4.DeadFuelMoisture_eqmc(self, fTemp, fRH)

    def initializeParameters(self, radius, name):
        return _nfdrs4.DeadFuelMoisture_initializeParameters(self, radius, name)

    def GetState(self):
        return _nfdrs4.DeadFuelMoisture_GetState(self)

    def SetState(self, state):
        return _nfdrs4.DeadFuelMoisture_SetState(self, state)
DeadFuelMoisture_swigregister = _nfdrs4.DeadFuelMoisture_swigregister
DeadFuelMoisture_swigregister(DeadFuelMoisture)

def DeadFuelMoisture_createDeadFuelMoisture1(*args):
    return _nfdrs4.DeadFuelMoisture_createDeadFuelMoisture1(*args)
DeadFuelMoisture_createDeadFuelMoisture1 = _nfdrs4.DeadFuelMoisture_createDeadFuelMoisture1

def DeadFuelMoisture_createDeadFuelMoisture10(*args):
    return _nfdrs4.DeadFuelMoisture_createDeadFuelMoisture10(*args)
DeadFuelMoisture_createDeadFuelMoisture10 = _nfdrs4.DeadFuelMoisture_createDeadFuelMoisture10

def DeadFuelMoisture_createDeadFuelMoisture100(*args):
    return _nfdrs4.DeadFuelMoisture_createDeadFuelMoisture100(*args)
DeadFuelMoisture_createDeadFuelMoisture100 = _nfdrs4.DeadFuelMoisture_createDeadFuelMoisture100

def DeadFuelMoisture_createDeadFuelMoisture1000(*args):
    return _nfdrs4.DeadFuelMoisture_createDeadFuelMoisture1000(*args)
DeadFuelMoisture_createDeadFuelMoisture1000 = _nfdrs4.DeadFuelMoisture_createDeadFuelMoisture1000

def DeadFuelMoisture_deriveAdsorptionRate(radius):
    return _nfdrs4.DeadFuelMoisture_deriveAdsorptionRate(radius)
DeadFuelMoisture_deriveAdsorptionRate = _nfdrs4.DeadFuelMoisture_deriveAdsorptionRate

def DeadFuelMoisture_deriveDiffusivitySteps(radius):
    return _nfdrs4.DeadFuelMoisture_deriveDiffusivitySteps(radius)
DeadFuelMoisture_deriveDiffusivitySteps = _nfdrs4.DeadFuelMoisture_deriveDiffusivitySteps

def DeadFuelMoisture_deriveMoistureSteps(radius):
    return _nfdrs4.DeadFuelMoisture_deriveMoistureSteps(radius)
DeadFuelMoisture_deriveMoistureSteps = _nfdrs4.DeadFuelMoisture_deriveMoistureSteps

def DeadFuelMoisture_derivePlanarHeatTransferRate(radius):
    return _nfdrs4.DeadFuelMoisture_derivePlanarHeatTransferRate(radius)
DeadFuelMoisture_derivePlanarHeatTransferRate = _nfdrs4.DeadFuelMoisture_derivePlanarHeatTransferRate

def DeadFuelMoisture_deriveRainfallRunoffFactor(radius):
    return _nfdrs4.DeadFuelMoisture_deriveRainfallRunoffFactor(radius)
DeadFuelMoisture_deriveRainfallRunoffFactor = _nfdrs4.DeadFuelMoisture_deriveRainfallRunoffFactor

def DeadFuelMoisture_deriveStickNodes(radius):
    return _nfdrs4.DeadFuelMoisture_deriveStickNodes(radius)
DeadFuelMoisture_deriveStickNodes = _nfdrs4.DeadFuelMoisture_deriveStickNodes

def DeadFuelMoisture_uniformRandom(min, max):
    return _nfdrs4.DeadFuelMoisture_uniformRandom(min, max)
DeadFuelMoisture_uniformRandom = _nfdrs4.DeadFuelMoisture_uniformRandom

NOVALUE = _nfdrs4.NOVALUE
RADPERDAY = _nfdrs4.RADPERDAY
RADPERDEG = _nfdrs4.RADPERDEG
MINDECL = _nfdrs4.MINDECL
SECPERRAD = _nfdrs4.SECPERRAD
DAYSOFF = _nfdrs4.DAYSOFF
class LiveFuelMoisture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LiveFuelMoisture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LiveFuelMoisture, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nfdrs4.new_LiveFuelMoisture(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Initialize(self, Lat, IsHerb, IsAnnual):
        return _nfdrs4.LiveFuelMoisture_Initialize(self, Lat, IsHerb, IsAnnual)

    def SetLimits(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
        return _nfdrs4.LiveFuelMoisture_SetLimits(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

    def Update(self, TempF, MaxTempF, MinTempF, RH, minRH, Jday, RTPrcp, thisTime):
        return _nfdrs4.LiveFuelMoisture_Update(self, TempF, MaxTempF, MinTempF, RH, minRH, Jday, RTPrcp, thisTime)

    def SetMAPeriod(self, MAPeriod):
        return _nfdrs4.LiveFuelMoisture_SetMAPeriod(self, MAPeriod)

    def SetLFMParameters(self, MaxGSI, GreenupThreshold, MinLFMVal, MaxLFMVal):
        return _nfdrs4.LiveFuelMoisture_SetLFMParameters(self, MaxGSI, GreenupThreshold, MinLFMVal, MaxLFMVal)

    def GetLFMParameters(self, MaxGSI, GreenupThreshold, MinLFMVal, MaxLFMVal):
        return _nfdrs4.LiveFuelMoisture_GetLFMParameters(self, MaxGSI, GreenupThreshold, MinLFMVal, MaxLFMVal)

    def SetNumPrecipDays(self, numDays):
        return _nfdrs4.LiveFuelMoisture_SetNumPrecipDays(self, numDays)

    def GetNumPrecipDays(self):
        return _nfdrs4.LiveFuelMoisture_GetNumPrecipDays(self)

    def GetMoisture(self, SnowDay=False):
        return _nfdrs4.LiveFuelMoisture_GetMoisture(self, SnowDay)

    def CalcRunningAvgGSI(self):
        return _nfdrs4.LiveFuelMoisture_CalcRunningAvgGSI(self)

    def CalcRunningAvgHerbFM(self, SnowDay=False):
        return _nfdrs4.LiveFuelMoisture_CalcRunningAvgHerbFM(self, SnowDay)

    def ResetHerbState(self):
        return _nfdrs4.LiveFuelMoisture_ResetHerbState(self)

    def CalcRunningAvgWoodyFM(self, SnowDay=False):
        return _nfdrs4.LiveFuelMoisture_CalcRunningAvgWoodyFM(self, SnowDay)

    def CalcGSI(self, minRH, maxTempF, minTempF, RTPrcp, lat, doy):
        return _nfdrs4.LiveFuelMoisture_CalcGSI(self, minRH, maxTempF, minTempF, RTPrcp, lat, doy)

    def CalcGSI_VPDAvg(self, RH, TempF, maxTempF, minTempF, RTPrcp, lat, doy):
        return _nfdrs4.LiveFuelMoisture_CalcGSI_VPDAvg(self, RH, TempF, maxTempF, minTempF, RTPrcp, lat, doy)

    def GetTminInd(self, Tmin):
        return _nfdrs4.LiveFuelMoisture_GetTminInd(self, Tmin)

    def GetVPDInd(self, VPD):
        return _nfdrs4.LiveFuelMoisture_GetVPDInd(self, VPD)

    def GetDaylInd(self, Dayl):
        return _nfdrs4.LiveFuelMoisture_GetDaylInd(self, Dayl)

    def GetPrcpInd(self, RTPrcp):
        return _nfdrs4.LiveFuelMoisture_GetPrcpInd(self, RTPrcp)

    def CalcDayl(self, lat, yday):
        return _nfdrs4.LiveFuelMoisture_CalcDayl(self, lat, yday)

    def CalcVPDavg(self, TempDewF, TempAvgF):
        return _nfdrs4.LiveFuelMoisture_CalcVPDavg(self, TempDewF, TempAvgF)

    def CalcVPD(self, RH, TempF):
        return _nfdrs4.LiveFuelMoisture_CalcVPD(self, RH, TempF)

    def CalcDPT(self, tempF, RH):
        return _nfdrs4.LiveFuelMoisture_CalcDPT(self, tempF, RH)

    def CalcVP(self, tempF):
        return _nfdrs4.LiveFuelMoisture_CalcVP(self, tempF)

    def GetMaxGSI(self):
        return _nfdrs4.LiveFuelMoisture_GetMaxGSI(self)

    def GetGreenupThreshold(self):
        return _nfdrs4.LiveFuelMoisture_GetGreenupThreshold(self)

    def GetMinLFMVal(self):
        return _nfdrs4.LiveFuelMoisture_GetMinLFMVal(self)

    def GetMaxLFMVal(self):
        return _nfdrs4.LiveFuelMoisture_GetMaxLFMVal(self)

    def SetUseVPDAvg(self, set):
        return _nfdrs4.LiveFuelMoisture_SetUseVPDAvg(self, set)

    def GetUseVPDAvg(self):
        return _nfdrs4.LiveFuelMoisture_GetUseVPDAvg(self)

    def GetIsAnnual(self):
        return _nfdrs4.LiveFuelMoisture_GetIsAnnual(self)

    def GetState(self):
        return _nfdrs4.LiveFuelMoisture_GetState(self)

    def SetState(self, state):
        return _nfdrs4.LiveFuelMoisture_SetState(self, state)

    def SetUseRTPrecip(self, set):
        return _nfdrs4.LiveFuelMoisture_SetUseRTPrecip(self, set)

    def GetUseRTPrecip(self):
        return _nfdrs4.LiveFuelMoisture_GetUseRTPrecip(self)
    __swig_destroy__ = _nfdrs4.delete_LiveFuelMoisture
    __del__ = lambda self: None
LiveFuelMoisture_swigregister = _nfdrs4.LiveFuelMoisture_swigregister
LiveFuelMoisture_swigregister(LiveFuelMoisture)

class DFMCalcState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DFMCalcState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DFMCalcState, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nfdrs4.new_DFMCalcState(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nfdrs4.delete_DFMCalcState
    __del__ = lambda self: None

    def ReadState(self, arg2):
        return _nfdrs4.DFMCalcState_ReadState(self, arg2)

    def SaveState(self, out):
        return _nfdrs4.DFMCalcState_SaveState(self, out)
    __swig_setmethods__["m_JDay"] = _nfdrs4.DFMCalcState_m_JDay_set
    __swig_getmethods__["m_JDay"] = _nfdrs4.DFMCalcState_m_JDay_get
    if _newclass:
        m_JDay = _swig_property(_nfdrs4.DFMCalcState_m_JDay_get, _nfdrs4.DFMCalcState_m_JDay_set)
    __swig_setmethods__["m_Year"] = _nfdrs4.DFMCalcState_m_Year_set
    __swig_getmethods__["m_Year"] = _nfdrs4.DFMCalcState_m_Year_get
    if _newclass:
        m_Year = _swig_property(_nfdrs4.DFMCalcState_m_Year_get, _nfdrs4.DFMCalcState_m_Year_set)
    __swig_setmethods__["m_Month"] = _nfdrs4.DFMCalcState_m_Month_set
    __swig_getmethods__["m_Month"] = _nfdrs4.DFMCalcState_m_Month_get
    if _newclass:
        m_Month = _swig_property(_nfdrs4.DFMCalcState_m_Month_get, _nfdrs4.DFMCalcState_m_Month_set)
    __swig_setmethods__["m_Day"] = _nfdrs4.DFMCalcState_m_Day_set
    __swig_getmethods__["m_Day"] = _nfdrs4.DFMCalcState_m_Day_get
    if _newclass:
        m_Day = _swig_property(_nfdrs4.DFMCalcState_m_Day_get, _nfdrs4.DFMCalcState_m_Day_set)
    __swig_setmethods__["m_Hour"] = _nfdrs4.DFMCalcState_m_Hour_set
    __swig_getmethods__["m_Hour"] = _nfdrs4.DFMCalcState_m_Hour_get
    if _newclass:
        m_Hour = _swig_property(_nfdrs4.DFMCalcState_m_Hour_get, _nfdrs4.DFMCalcState_m_Hour_set)
    __swig_setmethods__["m_Min"] = _nfdrs4.DFMCalcState_m_Min_set
    __swig_getmethods__["m_Min"] = _nfdrs4.DFMCalcState_m_Min_get
    if _newclass:
        m_Min = _swig_property(_nfdrs4.DFMCalcState_m_Min_get, _nfdrs4.DFMCalcState_m_Min_set)
    __swig_setmethods__["m_Sec"] = _nfdrs4.DFMCalcState_m_Sec_set
    __swig_getmethods__["m_Sec"] = _nfdrs4.DFMCalcState_m_Sec_get
    if _newclass:
        m_Sec = _swig_property(_nfdrs4.DFMCalcState_m_Sec_get, _nfdrs4.DFMCalcState_m_Sec_set)
    __swig_setmethods__["m_obstime"] = _nfdrs4.DFMCalcState_m_obstime_set
    __swig_getmethods__["m_obstime"] = _nfdrs4.DFMCalcState_m_obstime_get
    if _newclass:
        m_obstime = _swig_property(_nfdrs4.DFMCalcState_m_obstime_get, _nfdrs4.DFMCalcState_m_obstime_set)
    __swig_setmethods__["m_bp1"] = _nfdrs4.DFMCalcState_m_bp1_set
    __swig_getmethods__["m_bp1"] = _nfdrs4.DFMCalcState_m_bp1_get
    if _newclass:
        m_bp1 = _swig_property(_nfdrs4.DFMCalcState_m_bp1_get, _nfdrs4.DFMCalcState_m_bp1_set)
    __swig_setmethods__["m_et"] = _nfdrs4.DFMCalcState_m_et_set
    __swig_getmethods__["m_et"] = _nfdrs4.DFMCalcState_m_et_get
    if _newclass:
        m_et = _swig_property(_nfdrs4.DFMCalcState_m_et_get, _nfdrs4.DFMCalcState_m_et_set)
    __swig_setmethods__["m_ha1"] = _nfdrs4.DFMCalcState_m_ha1_set
    __swig_getmethods__["m_ha1"] = _nfdrs4.DFMCalcState_m_ha1_get
    if _newclass:
        m_ha1 = _swig_property(_nfdrs4.DFMCalcState_m_ha1_get, _nfdrs4.DFMCalcState_m_ha1_set)
    __swig_setmethods__["m_rc1"] = _nfdrs4.DFMCalcState_m_rc1_set
    __swig_getmethods__["m_rc1"] = _nfdrs4.DFMCalcState_m_rc1_get
    if _newclass:
        m_rc1 = _swig_property(_nfdrs4.DFMCalcState_m_rc1_get, _nfdrs4.DFMCalcState_m_rc1_set)
    __swig_setmethods__["m_sv1"] = _nfdrs4.DFMCalcState_m_sv1_set
    __swig_getmethods__["m_sv1"] = _nfdrs4.DFMCalcState_m_sv1_get
    if _newclass:
        m_sv1 = _swig_property(_nfdrs4.DFMCalcState_m_sv1_get, _nfdrs4.DFMCalcState_m_sv1_set)
    __swig_setmethods__["m_ta1"] = _nfdrs4.DFMCalcState_m_ta1_set
    __swig_getmethods__["m_ta1"] = _nfdrs4.DFMCalcState_m_ta1_get
    if _newclass:
        m_ta1 = _swig_property(_nfdrs4.DFMCalcState_m_ta1_get, _nfdrs4.DFMCalcState_m_ta1_set)
    __swig_setmethods__["m_hf"] = _nfdrs4.DFMCalcState_m_hf_set
    __swig_getmethods__["m_hf"] = _nfdrs4.DFMCalcState_m_hf_get
    if _newclass:
        m_hf = _swig_property(_nfdrs4.DFMCalcState_m_hf_get, _nfdrs4.DFMCalcState_m_hf_set)
    __swig_setmethods__["m_wsa"] = _nfdrs4.DFMCalcState_m_wsa_set
    __swig_getmethods__["m_wsa"] = _nfdrs4.DFMCalcState_m_wsa_get
    if _newclass:
        m_wsa = _swig_property(_nfdrs4.DFMCalcState_m_wsa_get, _nfdrs4.DFMCalcState_m_wsa_set)
    __swig_setmethods__["m_rdur"] = _nfdrs4.DFMCalcState_m_rdur_set
    __swig_getmethods__["m_rdur"] = _nfdrs4.DFMCalcState_m_rdur_get
    if _newclass:
        m_rdur = _swig_property(_nfdrs4.DFMCalcState_m_rdur_get, _nfdrs4.DFMCalcState_m_rdur_set)
    __swig_setmethods__["m_ra1"] = _nfdrs4.DFMCalcState_m_ra1_set
    __swig_getmethods__["m_ra1"] = _nfdrs4.DFMCalcState_m_ra1_get
    if _newclass:
        m_ra1 = _swig_property(_nfdrs4.DFMCalcState_m_ra1_get, _nfdrs4.DFMCalcState_m_ra1_set)
    __swig_setmethods__["m_nodes"] = _nfdrs4.DFMCalcState_m_nodes_set
    __swig_getmethods__["m_nodes"] = _nfdrs4.DFMCalcState_m_nodes_get
    if _newclass:
        m_nodes = _swig_property(_nfdrs4.DFMCalcState_m_nodes_get, _nfdrs4.DFMCalcState_m_nodes_set)
    __swig_setmethods__["m_t"] = _nfdrs4.DFMCalcState_m_t_set
    __swig_getmethods__["m_t"] = _nfdrs4.DFMCalcState_m_t_get
    if _newclass:
        m_t = _swig_property(_nfdrs4.DFMCalcState_m_t_get, _nfdrs4.DFMCalcState_m_t_set)
    __swig_setmethods__["m_s"] = _nfdrs4.DFMCalcState_m_s_set
    __swig_getmethods__["m_s"] = _nfdrs4.DFMCalcState_m_s_get
    if _newclass:
        m_s = _swig_property(_nfdrs4.DFMCalcState_m_s_get, _nfdrs4.DFMCalcState_m_s_set)
    __swig_setmethods__["m_d"] = _nfdrs4.DFMCalcState_m_d_set
    __swig_getmethods__["m_d"] = _nfdrs4.DFMCalcState_m_d_get
    if _newclass:
        m_d = _swig_property(_nfdrs4.DFMCalcState_m_d_get, _nfdrs4.DFMCalcState_m_d_set)
    __swig_setmethods__["m_w"] = _nfdrs4.DFMCalcState_m_w_set
    __swig_getmethods__["m_w"] = _nfdrs4.DFMCalcState_m_w_get
    if _newclass:
        m_w = _swig_property(_nfdrs4.DFMCalcState_m_w_get, _nfdrs4.DFMCalcState_m_w_set)
DFMCalcState_swigregister = _nfdrs4.DFMCalcState_swigregister
DFMCalcState_swigregister(DFMCalcState)

class LFMCalcState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LFMCalcState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LFMCalcState, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nfdrs4.new_LFMCalcState(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nfdrs4.delete_LFMCalcState
    __del__ = lambda self: None

    def ReadState(self, arg2):
        return _nfdrs4.LFMCalcState_ReadState(self, arg2)

    def SaveState(self, out):
        return _nfdrs4.LFMCalcState_SaveState(self, out)
    __swig_setmethods__["m_lastUpdateTime"] = _nfdrs4.LFMCalcState_m_lastUpdateTime_set
    __swig_getmethods__["m_lastUpdateTime"] = _nfdrs4.LFMCalcState_m_lastUpdateTime_get
    if _newclass:
        m_lastUpdateTime = _swig_property(_nfdrs4.LFMCalcState_m_lastUpdateTime_get, _nfdrs4.LFMCalcState_m_lastUpdateTime_set)
    __swig_setmethods__["m_UseVPDAvg"] = _nfdrs4.LFMCalcState_m_UseVPDAvg_set
    __swig_getmethods__["m_UseVPDAvg"] = _nfdrs4.LFMCalcState_m_UseVPDAvg_get
    if _newclass:
        m_UseVPDAvg = _swig_property(_nfdrs4.LFMCalcState_m_UseVPDAvg_get, _nfdrs4.LFMCalcState_m_UseVPDAvg_set)
    __swig_setmethods__["m_IsHerb"] = _nfdrs4.LFMCalcState_m_IsHerb_set
    __swig_getmethods__["m_IsHerb"] = _nfdrs4.LFMCalcState_m_IsHerb_get
    if _newclass:
        m_IsHerb = _swig_property(_nfdrs4.LFMCalcState_m_IsHerb_get, _nfdrs4.LFMCalcState_m_IsHerb_set)
    __swig_setmethods__["m_IsAnnual"] = _nfdrs4.LFMCalcState_m_IsAnnual_set
    __swig_getmethods__["m_IsAnnual"] = _nfdrs4.LFMCalcState_m_IsAnnual_get
    if _newclass:
        m_IsAnnual = _swig_property(_nfdrs4.LFMCalcState_m_IsAnnual_get, _nfdrs4.LFMCalcState_m_IsAnnual_set)
    __swig_setmethods__["m_LFIdaysAvg"] = _nfdrs4.LFMCalcState_m_LFIdaysAvg_set
    __swig_getmethods__["m_LFIdaysAvg"] = _nfdrs4.LFMCalcState_m_LFIdaysAvg_get
    if _newclass:
        m_LFIdaysAvg = _swig_property(_nfdrs4.LFMCalcState_m_LFIdaysAvg_get, _nfdrs4.LFMCalcState_m_LFIdaysAvg_set)
    __swig_setmethods__["m_nDaysPrecip"] = _nfdrs4.LFMCalcState_m_nDaysPrecip_set
    __swig_getmethods__["m_nDaysPrecip"] = _nfdrs4.LFMCalcState_m_nDaysPrecip_get
    if _newclass:
        m_nDaysPrecip = _swig_property(_nfdrs4.LFMCalcState_m_nDaysPrecip_get, _nfdrs4.LFMCalcState_m_nDaysPrecip_set)
    __swig_setmethods__["m_Lat"] = _nfdrs4.LFMCalcState_m_Lat_set
    __swig_getmethods__["m_Lat"] = _nfdrs4.LFMCalcState_m_Lat_get
    if _newclass:
        m_Lat = _swig_property(_nfdrs4.LFMCalcState_m_Lat_get, _nfdrs4.LFMCalcState_m_Lat_set)
    __swig_setmethods__["m_TminMin"] = _nfdrs4.LFMCalcState_m_TminMin_set
    __swig_getmethods__["m_TminMin"] = _nfdrs4.LFMCalcState_m_TminMin_get
    if _newclass:
        m_TminMin = _swig_property(_nfdrs4.LFMCalcState_m_TminMin_get, _nfdrs4.LFMCalcState_m_TminMin_set)
    __swig_setmethods__["m_TminMax"] = _nfdrs4.LFMCalcState_m_TminMax_set
    __swig_getmethods__["m_TminMax"] = _nfdrs4.LFMCalcState_m_TminMax_get
    if _newclass:
        m_TminMax = _swig_property(_nfdrs4.LFMCalcState_m_TminMax_get, _nfdrs4.LFMCalcState_m_TminMax_set)
    __swig_setmethods__["m_VPDMin"] = _nfdrs4.LFMCalcState_m_VPDMin_set
    __swig_getmethods__["m_VPDMin"] = _nfdrs4.LFMCalcState_m_VPDMin_get
    if _newclass:
        m_VPDMin = _swig_property(_nfdrs4.LFMCalcState_m_VPDMin_get, _nfdrs4.LFMCalcState_m_VPDMin_set)
    __swig_setmethods__["m_VPDMax"] = _nfdrs4.LFMCalcState_m_VPDMax_set
    __swig_getmethods__["m_VPDMax"] = _nfdrs4.LFMCalcState_m_VPDMax_get
    if _newclass:
        m_VPDMax = _swig_property(_nfdrs4.LFMCalcState_m_VPDMax_get, _nfdrs4.LFMCalcState_m_VPDMax_set)
    __swig_setmethods__["m_DaylenMin"] = _nfdrs4.LFMCalcState_m_DaylenMin_set
    __swig_getmethods__["m_DaylenMin"] = _nfdrs4.LFMCalcState_m_DaylenMin_get
    if _newclass:
        m_DaylenMin = _swig_property(_nfdrs4.LFMCalcState_m_DaylenMin_get, _nfdrs4.LFMCalcState_m_DaylenMin_set)
    __swig_setmethods__["m_DaylenMax"] = _nfdrs4.LFMCalcState_m_DaylenMax_set
    __swig_getmethods__["m_DaylenMax"] = _nfdrs4.LFMCalcState_m_DaylenMax_get
    if _newclass:
        m_DaylenMax = _swig_property(_nfdrs4.LFMCalcState_m_DaylenMax_get, _nfdrs4.LFMCalcState_m_DaylenMax_set)
    __swig_setmethods__["m_MaxGSI"] = _nfdrs4.LFMCalcState_m_MaxGSI_set
    __swig_getmethods__["m_MaxGSI"] = _nfdrs4.LFMCalcState_m_MaxGSI_get
    if _newclass:
        m_MaxGSI = _swig_property(_nfdrs4.LFMCalcState_m_MaxGSI_get, _nfdrs4.LFMCalcState_m_MaxGSI_set)
    __swig_setmethods__["m_GreenupThreshold"] = _nfdrs4.LFMCalcState_m_GreenupThreshold_set
    __swig_getmethods__["m_GreenupThreshold"] = _nfdrs4.LFMCalcState_m_GreenupThreshold_get
    if _newclass:
        m_GreenupThreshold = _swig_property(_nfdrs4.LFMCalcState_m_GreenupThreshold_get, _nfdrs4.LFMCalcState_m_GreenupThreshold_set)
    __swig_setmethods__["m_MaxLFMVal"] = _nfdrs4.LFMCalcState_m_MaxLFMVal_set
    __swig_getmethods__["m_MaxLFMVal"] = _nfdrs4.LFMCalcState_m_MaxLFMVal_get
    if _newclass:
        m_MaxLFMVal = _swig_property(_nfdrs4.LFMCalcState_m_MaxLFMVal_get, _nfdrs4.LFMCalcState_m_MaxLFMVal_set)
    __swig_setmethods__["m_MinLFMVal"] = _nfdrs4.LFMCalcState_m_MinLFMVal_set
    __swig_getmethods__["m_MinLFMVal"] = _nfdrs4.LFMCalcState_m_MinLFMVal_get
    if _newclass:
        m_MinLFMVal = _swig_property(_nfdrs4.LFMCalcState_m_MinLFMVal_get, _nfdrs4.LFMCalcState_m_MinLFMVal_set)
    __swig_setmethods__["m_Slope"] = _nfdrs4.LFMCalcState_m_Slope_set
    __swig_getmethods__["m_Slope"] = _nfdrs4.LFMCalcState_m_Slope_get
    if _newclass:
        m_Slope = _swig_property(_nfdrs4.LFMCalcState_m_Slope_get, _nfdrs4.LFMCalcState_m_Slope_set)
    __swig_setmethods__["m_Intercept"] = _nfdrs4.LFMCalcState_m_Intercept_set
    __swig_getmethods__["m_Intercept"] = _nfdrs4.LFMCalcState_m_Intercept_get
    if _newclass:
        m_Intercept = _swig_property(_nfdrs4.LFMCalcState_m_Intercept_get, _nfdrs4.LFMCalcState_m_Intercept_set)
    __swig_setmethods__["m_hasGreenedUpThisYear"] = _nfdrs4.LFMCalcState_m_hasGreenedUpThisYear_set
    __swig_getmethods__["m_hasGreenedUpThisYear"] = _nfdrs4.LFMCalcState_m_hasGreenedUpThisYear_get
    if _newclass:
        m_hasGreenedUpThisYear = _swig_property(_nfdrs4.LFMCalcState_m_hasGreenedUpThisYear_get, _nfdrs4.LFMCalcState_m_hasGreenedUpThisYear_set)
    __swig_setmethods__["m_hasExceeded120ThisYear"] = _nfdrs4.LFMCalcState_m_hasExceeded120ThisYear_set
    __swig_getmethods__["m_hasExceeded120ThisYear"] = _nfdrs4.LFMCalcState_m_hasExceeded120ThisYear_get
    if _newclass:
        m_hasExceeded120ThisYear = _swig_property(_nfdrs4.LFMCalcState_m_hasExceeded120ThisYear_get, _nfdrs4.LFMCalcState_m_hasExceeded120ThisYear_set)
    __swig_setmethods__["m_canIncreaseHerb"] = _nfdrs4.LFMCalcState_m_canIncreaseHerb_set
    __swig_getmethods__["m_canIncreaseHerb"] = _nfdrs4.LFMCalcState_m_canIncreaseHerb_get
    if _newclass:
        m_canIncreaseHerb = _swig_property(_nfdrs4.LFMCalcState_m_canIncreaseHerb_get, _nfdrs4.LFMCalcState_m_canIncreaseHerb_set)
    __swig_setmethods__["lastHerbFM"] = _nfdrs4.LFMCalcState_lastHerbFM_set
    __swig_getmethods__["lastHerbFM"] = _nfdrs4.LFMCalcState_lastHerbFM_get
    if _newclass:
        lastHerbFM = _swig_property(_nfdrs4.LFMCalcState_lastHerbFM_get, _nfdrs4.LFMCalcState_lastHerbFM_set)
    __swig_setmethods__["m_useRTPrecip"] = _nfdrs4.LFMCalcState_m_useRTPrecip_set
    __swig_getmethods__["m_useRTPrecip"] = _nfdrs4.LFMCalcState_m_useRTPrecip_get
    if _newclass:
        m_useRTPrecip = _swig_property(_nfdrs4.LFMCalcState_m_useRTPrecip_get, _nfdrs4.LFMCalcState_m_useRTPrecip_set)
    __swig_setmethods__["m_pcpMin"] = _nfdrs4.LFMCalcState_m_pcpMin_set
    __swig_getmethods__["m_pcpMin"] = _nfdrs4.LFMCalcState_m_pcpMin_get
    if _newclass:
        m_pcpMin = _swig_property(_nfdrs4.LFMCalcState_m_pcpMin_get, _nfdrs4.LFMCalcState_m_pcpMin_set)
    __swig_setmethods__["m_pcpMax"] = _nfdrs4.LFMCalcState_m_pcpMax_set
    __swig_getmethods__["m_pcpMax"] = _nfdrs4.LFMCalcState_m_pcpMax_get
    if _newclass:
        m_pcpMax = _swig_property(_nfdrs4.LFMCalcState_m_pcpMax_get, _nfdrs4.LFMCalcState_m_pcpMax_set)
    __swig_setmethods__["m_qGSI"] = _nfdrs4.LFMCalcState_m_qGSI_set
    __swig_getmethods__["m_qGSI"] = _nfdrs4.LFMCalcState_m_qGSI_get
    if _newclass:
        m_qGSI = _swig_property(_nfdrs4.LFMCalcState_m_qGSI_get, _nfdrs4.LFMCalcState_m_qGSI_set)
LFMCalcState_swigregister = _nfdrs4.LFMCalcState_swigregister
LFMCalcState_swigregister(LFMCalcState)

class NFDRS4State(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NFDRS4State, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NFDRS4State, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nfdrs4.new_NFDRS4State(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nfdrs4.delete_NFDRS4State
    __del__ = lambda self: None

    def LoadState(self, fileName):
        return _nfdrs4.NFDRS4State_LoadState(self, fileName)

    def SaveState(self, fileName):
        return _nfdrs4.NFDRS4State_SaveState(self, fileName)
    __swig_setmethods__["m_NFDRSVersion"] = _nfdrs4.NFDRS4State_m_NFDRSVersion_set
    __swig_getmethods__["m_NFDRSVersion"] = _nfdrs4.NFDRS4State_m_NFDRSVersion_get
    if _newclass:
        m_NFDRSVersion = _swig_property(_nfdrs4.NFDRS4State_m_NFDRSVersion_get, _nfdrs4.NFDRS4State_m_NFDRSVersion_set)
    __swig_setmethods__["fm1State"] = _nfdrs4.NFDRS4State_fm1State_set
    __swig_getmethods__["fm1State"] = _nfdrs4.NFDRS4State_fm1State_get
    if _newclass:
        fm1State = _swig_property(_nfdrs4.NFDRS4State_fm1State_get, _nfdrs4.NFDRS4State_fm1State_set)
    __swig_setmethods__["fm10State"] = _nfdrs4.NFDRS4State_fm10State_set
    __swig_getmethods__["fm10State"] = _nfdrs4.NFDRS4State_fm10State_get
    if _newclass:
        fm10State = _swig_property(_nfdrs4.NFDRS4State_fm10State_get, _nfdrs4.NFDRS4State_fm10State_set)
    __swig_setmethods__["fm100State"] = _nfdrs4.NFDRS4State_fm100State_set
    __swig_getmethods__["fm100State"] = _nfdrs4.NFDRS4State_fm100State_get
    if _newclass:
        fm100State = _swig_property(_nfdrs4.NFDRS4State_fm100State_get, _nfdrs4.NFDRS4State_fm100State_set)
    __swig_setmethods__["fm1000State"] = _nfdrs4.NFDRS4State_fm1000State_set
    __swig_getmethods__["fm1000State"] = _nfdrs4.NFDRS4State_fm1000State_get
    if _newclass:
        fm1000State = _swig_property(_nfdrs4.NFDRS4State_fm1000State_get, _nfdrs4.NFDRS4State_fm1000State_set)
    __swig_setmethods__["herbState"] = _nfdrs4.NFDRS4State_herbState_set
    __swig_getmethods__["herbState"] = _nfdrs4.NFDRS4State_herbState_get
    if _newclass:
        herbState = _swig_property(_nfdrs4.NFDRS4State_herbState_get, _nfdrs4.NFDRS4State_herbState_set)
    __swig_setmethods__["woodyState"] = _nfdrs4.NFDRS4State_woodyState_set
    __swig_getmethods__["woodyState"] = _nfdrs4.NFDRS4State_woodyState_get
    if _newclass:
        woodyState = _swig_property(_nfdrs4.NFDRS4State_woodyState_get, _nfdrs4.NFDRS4State_woodyState_set)
    __swig_setmethods__["m_Lat"] = _nfdrs4.NFDRS4State_m_Lat_set
    __swig_getmethods__["m_Lat"] = _nfdrs4.NFDRS4State_m_Lat_get
    if _newclass:
        m_Lat = _swig_property(_nfdrs4.NFDRS4State_m_Lat_get, _nfdrs4.NFDRS4State_m_Lat_set)
    __swig_setmethods__["m_YesterdayJDay"] = _nfdrs4.NFDRS4State_m_YesterdayJDay_set
    __swig_getmethods__["m_YesterdayJDay"] = _nfdrs4.NFDRS4State_m_YesterdayJDay_get
    if _newclass:
        m_YesterdayJDay = _swig_property(_nfdrs4.NFDRS4State_m_YesterdayJDay_get, _nfdrs4.NFDRS4State_m_YesterdayJDay_set)
    __swig_setmethods__["m_SlopeClass"] = _nfdrs4.NFDRS4State_m_SlopeClass_set
    __swig_getmethods__["m_SlopeClass"] = _nfdrs4.NFDRS4State_m_SlopeClass_get
    if _newclass:
        m_SlopeClass = _swig_property(_nfdrs4.NFDRS4State_m_SlopeClass_get, _nfdrs4.NFDRS4State_m_SlopeClass_set)
    __swig_setmethods__["m_FuelModel"] = _nfdrs4.NFDRS4State_m_FuelModel_set
    __swig_getmethods__["m_FuelModel"] = _nfdrs4.NFDRS4State_m_FuelModel_get
    if _newclass:
        m_FuelModel = _swig_property(_nfdrs4.NFDRS4State_m_FuelModel_get, _nfdrs4.NFDRS4State_m_FuelModel_set)
    __swig_setmethods__["m_MC1"] = _nfdrs4.NFDRS4State_m_MC1_set
    __swig_getmethods__["m_MC1"] = _nfdrs4.NFDRS4State_m_MC1_get
    if _newclass:
        m_MC1 = _swig_property(_nfdrs4.NFDRS4State_m_MC1_get, _nfdrs4.NFDRS4State_m_MC1_set)
    __swig_setmethods__["m_MC10"] = _nfdrs4.NFDRS4State_m_MC10_set
    __swig_getmethods__["m_MC10"] = _nfdrs4.NFDRS4State_m_MC10_get
    if _newclass:
        m_MC10 = _swig_property(_nfdrs4.NFDRS4State_m_MC10_get, _nfdrs4.NFDRS4State_m_MC10_set)
    __swig_setmethods__["m_MC100"] = _nfdrs4.NFDRS4State_m_MC100_set
    __swig_getmethods__["m_MC100"] = _nfdrs4.NFDRS4State_m_MC100_get
    if _newclass:
        m_MC100 = _swig_property(_nfdrs4.NFDRS4State_m_MC100_get, _nfdrs4.NFDRS4State_m_MC100_set)
    __swig_setmethods__["m_MC1000"] = _nfdrs4.NFDRS4State_m_MC1000_set
    __swig_getmethods__["m_MC1000"] = _nfdrs4.NFDRS4State_m_MC1000_get
    if _newclass:
        m_MC1000 = _swig_property(_nfdrs4.NFDRS4State_m_MC1000_get, _nfdrs4.NFDRS4State_m_MC1000_set)
    __swig_setmethods__["m_MCWOOD"] = _nfdrs4.NFDRS4State_m_MCWOOD_set
    __swig_getmethods__["m_MCWOOD"] = _nfdrs4.NFDRS4State_m_MCWOOD_get
    if _newclass:
        m_MCWOOD = _swig_property(_nfdrs4.NFDRS4State_m_MCWOOD_get, _nfdrs4.NFDRS4State_m_MCWOOD_set)
    __swig_setmethods__["m_MCHERB"] = _nfdrs4.NFDRS4State_m_MCHERB_set
    __swig_getmethods__["m_MCHERB"] = _nfdrs4.NFDRS4State_m_MCHERB_get
    if _newclass:
        m_MCHERB = _swig_property(_nfdrs4.NFDRS4State_m_MCHERB_get, _nfdrs4.NFDRS4State_m_MCHERB_set)
    __swig_setmethods__["m_PrevYear"] = _nfdrs4.NFDRS4State_m_PrevYear_set
    __swig_getmethods__["m_PrevYear"] = _nfdrs4.NFDRS4State_m_PrevYear_get
    if _newclass:
        m_PrevYear = _swig_property(_nfdrs4.NFDRS4State_m_PrevYear_get, _nfdrs4.NFDRS4State_m_PrevYear_set)
    __swig_setmethods__["m_KBDI"] = _nfdrs4.NFDRS4State_m_KBDI_set
    __swig_getmethods__["m_KBDI"] = _nfdrs4.NFDRS4State_m_KBDI_get
    if _newclass:
        m_KBDI = _swig_property(_nfdrs4.NFDRS4State_m_KBDI_get, _nfdrs4.NFDRS4State_m_KBDI_set)
    __swig_setmethods__["m_YKBDI"] = _nfdrs4.NFDRS4State_m_YKBDI_set
    __swig_getmethods__["m_YKBDI"] = _nfdrs4.NFDRS4State_m_YKBDI_get
    if _newclass:
        m_YKBDI = _swig_property(_nfdrs4.NFDRS4State_m_YKBDI_get, _nfdrs4.NFDRS4State_m_YKBDI_set)
    __swig_setmethods__["m_StartKBDI"] = _nfdrs4.NFDRS4State_m_StartKBDI_set
    __swig_getmethods__["m_StartKBDI"] = _nfdrs4.NFDRS4State_m_StartKBDI_get
    if _newclass:
        m_StartKBDI = _swig_property(_nfdrs4.NFDRS4State_m_StartKBDI_get, _nfdrs4.NFDRS4State_m_StartKBDI_set)
    __swig_setmethods__["m_KBDIThreshold"] = _nfdrs4.NFDRS4State_m_KBDIThreshold_set
    __swig_getmethods__["m_KBDIThreshold"] = _nfdrs4.NFDRS4State_m_KBDIThreshold_get
    if _newclass:
        m_KBDIThreshold = _swig_property(_nfdrs4.NFDRS4State_m_KBDIThreshold_get, _nfdrs4.NFDRS4State_m_KBDIThreshold_set)
    __swig_setmethods__["m_CummPrecip"] = _nfdrs4.NFDRS4State_m_CummPrecip_set
    __swig_getmethods__["m_CummPrecip"] = _nfdrs4.NFDRS4State_m_CummPrecip_get
    if _newclass:
        m_CummPrecip = _swig_property(_nfdrs4.NFDRS4State_m_CummPrecip_get, _nfdrs4.NFDRS4State_m_CummPrecip_set)
    __swig_setmethods__["m_AvgPrecip"] = _nfdrs4.NFDRS4State_m_AvgPrecip_set
    __swig_getmethods__["m_AvgPrecip"] = _nfdrs4.NFDRS4State_m_AvgPrecip_get
    if _newclass:
        m_AvgPrecip = _swig_property(_nfdrs4.NFDRS4State_m_AvgPrecip_get, _nfdrs4.NFDRS4State_m_AvgPrecip_set)
    __swig_setmethods__["m_UseLoadTransfer"] = _nfdrs4.NFDRS4State_m_UseLoadTransfer_set
    __swig_getmethods__["m_UseLoadTransfer"] = _nfdrs4.NFDRS4State_m_UseLoadTransfer_get
    if _newclass:
        m_UseLoadTransfer = _swig_property(_nfdrs4.NFDRS4State_m_UseLoadTransfer_get, _nfdrs4.NFDRS4State_m_UseLoadTransfer_set)
    __swig_setmethods__["m_UseCuring"] = _nfdrs4.NFDRS4State_m_UseCuring_set
    __swig_getmethods__["m_UseCuring"] = _nfdrs4.NFDRS4State_m_UseCuring_get
    if _newclass:
        m_UseCuring = _swig_property(_nfdrs4.NFDRS4State_m_UseCuring_get, _nfdrs4.NFDRS4State_m_UseCuring_set)
    __swig_setmethods__["m_FuelTemperature"] = _nfdrs4.NFDRS4State_m_FuelTemperature_set
    __swig_getmethods__["m_FuelTemperature"] = _nfdrs4.NFDRS4State_m_FuelTemperature_get
    if _newclass:
        m_FuelTemperature = _swig_property(_nfdrs4.NFDRS4State_m_FuelTemperature_get, _nfdrs4.NFDRS4State_m_FuelTemperature_set)
    __swig_setmethods__["m_BI"] = _nfdrs4.NFDRS4State_m_BI_set
    __swig_getmethods__["m_BI"] = _nfdrs4.NFDRS4State_m_BI_get
    if _newclass:
        m_BI = _swig_property(_nfdrs4.NFDRS4State_m_BI_get, _nfdrs4.NFDRS4State_m_BI_set)
    __swig_setmethods__["m_ERC"] = _nfdrs4.NFDRS4State_m_ERC_set
    __swig_getmethods__["m_ERC"] = _nfdrs4.NFDRS4State_m_ERC_get
    if _newclass:
        m_ERC = _swig_property(_nfdrs4.NFDRS4State_m_ERC_get, _nfdrs4.NFDRS4State_m_ERC_set)
    __swig_setmethods__["m_SC"] = _nfdrs4.NFDRS4State_m_SC_set
    __swig_getmethods__["m_SC"] = _nfdrs4.NFDRS4State_m_SC_get
    if _newclass:
        m_SC = _swig_property(_nfdrs4.NFDRS4State_m_SC_get, _nfdrs4.NFDRS4State_m_SC_set)
    __swig_setmethods__["m_IC"] = _nfdrs4.NFDRS4State_m_IC_set
    __swig_getmethods__["m_IC"] = _nfdrs4.NFDRS4State_m_IC_get
    if _newclass:
        m_IC = _swig_property(_nfdrs4.NFDRS4State_m_IC_get, _nfdrs4.NFDRS4State_m_IC_set)
    __swig_setmethods__["m_GSI"] = _nfdrs4.NFDRS4State_m_GSI_set
    __swig_getmethods__["m_GSI"] = _nfdrs4.NFDRS4State_m_GSI_get
    if _newclass:
        m_GSI = _swig_property(_nfdrs4.NFDRS4State_m_GSI_get, _nfdrs4.NFDRS4State_m_GSI_set)
    __swig_setmethods__["m_nConsectiveSnowDays"] = _nfdrs4.NFDRS4State_m_nConsectiveSnowDays_set
    __swig_getmethods__["m_nConsectiveSnowDays"] = _nfdrs4.NFDRS4State_m_nConsectiveSnowDays_get
    if _newclass:
        m_nConsectiveSnowDays = _swig_property(_nfdrs4.NFDRS4State_m_nConsectiveSnowDays_get, _nfdrs4.NFDRS4State_m_nConsectiveSnowDays_set)
    __swig_setmethods__["m_lastUtcUpdateTime"] = _nfdrs4.NFDRS4State_m_lastUtcUpdateTime_set
    __swig_getmethods__["m_lastUtcUpdateTime"] = _nfdrs4.NFDRS4State_m_lastUtcUpdateTime_get
    if _newclass:
        m_lastUtcUpdateTime = _swig_property(_nfdrs4.NFDRS4State_m_lastUtcUpdateTime_get, _nfdrs4.NFDRS4State_m_lastUtcUpdateTime_set)
    __swig_setmethods__["m_lastDailyUpdateTime"] = _nfdrs4.NFDRS4State_m_lastDailyUpdateTime_set
    __swig_getmethods__["m_lastDailyUpdateTime"] = _nfdrs4.NFDRS4State_m_lastDailyUpdateTime_get
    if _newclass:
        m_lastDailyUpdateTime = _swig_property(_nfdrs4.NFDRS4State_m_lastDailyUpdateTime_get, _nfdrs4.NFDRS4State_m_lastDailyUpdateTime_set)
    __swig_setmethods__["m_qPrecip"] = _nfdrs4.NFDRS4State_m_qPrecip_set
    __swig_getmethods__["m_qPrecip"] = _nfdrs4.NFDRS4State_m_qPrecip_get
    if _newclass:
        m_qPrecip = _swig_property(_nfdrs4.NFDRS4State_m_qPrecip_get, _nfdrs4.NFDRS4State_m_qPrecip_set)
    __swig_setmethods__["m_qHourlyPrecip"] = _nfdrs4.NFDRS4State_m_qHourlyPrecip_set
    __swig_getmethods__["m_qHourlyPrecip"] = _nfdrs4.NFDRS4State_m_qHourlyPrecip_get
    if _newclass:
        m_qHourlyPrecip = _swig_property(_nfdrs4.NFDRS4State_m_qHourlyPrecip_get, _nfdrs4.NFDRS4State_m_qHourlyPrecip_set)
    __swig_setmethods__["m_qHourlyTemp"] = _nfdrs4.NFDRS4State_m_qHourlyTemp_set
    __swig_getmethods__["m_qHourlyTemp"] = _nfdrs4.NFDRS4State_m_qHourlyTemp_get
    if _newclass:
        m_qHourlyTemp = _swig_property(_nfdrs4.NFDRS4State_m_qHourlyTemp_get, _nfdrs4.NFDRS4State_m_qHourlyTemp_set)
    __swig_setmethods__["m_qHourlyRH"] = _nfdrs4.NFDRS4State_m_qHourlyRH_set
    __swig_getmethods__["m_qHourlyRH"] = _nfdrs4.NFDRS4State_m_qHourlyRH_get
    if _newclass:
        m_qHourlyRH = _swig_property(_nfdrs4.NFDRS4State_m_qHourlyRH_get, _nfdrs4.NFDRS4State_m_qHourlyRH_set)
NFDRS4State_swigregister = _nfdrs4.NFDRS4State_swigregister
NFDRS4State_swigregister(NFDRS4State)

class CFuelModelParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFuelModelParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFuelModelParams, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nfdrs4.new_CFuelModelParams(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nfdrs4.delete_CFuelModelParams
    __del__ = lambda self: None

    def getFuelModel(self):
        return _nfdrs4.CFuelModelParams_getFuelModel(self)

    def getDescription(self):
        return _nfdrs4.CFuelModelParams_getDescription(self)

    def getSG1(self):
        return _nfdrs4.CFuelModelParams_getSG1(self)

    def getSG10(self):
        return _nfdrs4.CFuelModelParams_getSG10(self)

    def getSG100(self):
        return _nfdrs4.CFuelModelParams_getSG100(self)

    def getSG1000(self):
        return _nfdrs4.CFuelModelParams_getSG1000(self)

    def getSGHerb(self):
        return _nfdrs4.CFuelModelParams_getSGHerb(self)

    def getSGWood(self):
        return _nfdrs4.CFuelModelParams_getSGWood(self)

    def getL1(self):
        return _nfdrs4.CFuelModelParams_getL1(self)

    def getL10(self):
        return _nfdrs4.CFuelModelParams_getL10(self)

    def getL100(self):
        return _nfdrs4.CFuelModelParams_getL100(self)

    def getL1000(self):
        return _nfdrs4.CFuelModelParams_getL1000(self)

    def getLHerb(self):
        return _nfdrs4.CFuelModelParams_getLHerb(self)

    def getLWood(self):
        return _nfdrs4.CFuelModelParams_getLWood(self)

    def getDepth(self):
        return _nfdrs4.CFuelModelParams_getDepth(self)

    def getMXD(self):
        return _nfdrs4.CFuelModelParams_getMXD(self)

    def getHD(self):
        return _nfdrs4.CFuelModelParams_getHD(self)

    def getSCM(self):
        return _nfdrs4.CFuelModelParams_getSCM(self)

    def getLDrought(self):
        return _nfdrs4.CFuelModelParams_getLDrought(self)

    def getWNDFC(self):
        return _nfdrs4.CFuelModelParams_getWNDFC(self)

    def setFuelModel(self, fm):
        return _nfdrs4.CFuelModelParams_setFuelModel(self, fm)

    def setDescription(self, description):
        return _nfdrs4.CFuelModelParams_setDescription(self, description)

    def setSG1(self, sg1):
        return _nfdrs4.CFuelModelParams_setSG1(self, sg1)

    def setSG10(self, sg10):
        return _nfdrs4.CFuelModelParams_setSG10(self, sg10)

    def setSG100(self, sg100):
        return _nfdrs4.CFuelModelParams_setSG100(self, sg100)

    def setSG1000(self, sg1000):
        return _nfdrs4.CFuelModelParams_setSG1000(self, sg1000)

    def setSGHerb(self, sgHerb):
        return _nfdrs4.CFuelModelParams_setSGHerb(self, sgHerb)

    def setSGWood(self, sgWood):
        return _nfdrs4.CFuelModelParams_setSGWood(self, sgWood)

    def setL1(self, l1):
        return _nfdrs4.CFuelModelParams_setL1(self, l1)

    def setL10(self, l10):
        return _nfdrs4.CFuelModelParams_setL10(self, l10)

    def setL100(self, l100):
        return _nfdrs4.CFuelModelParams_setL100(self, l100)

    def setL1000(self, l1000):
        return _nfdrs4.CFuelModelParams_setL1000(self, l1000)

    def setLHerb(self, lHerb):
        return _nfdrs4.CFuelModelParams_setLHerb(self, lHerb)

    def setLWood(self, lWood):
        return _nfdrs4.CFuelModelParams_setLWood(self, lWood)

    def setDepth(self, depth):
        return _nfdrs4.CFuelModelParams_setDepth(self, depth)

    def setMXD(self, mxd):
        return _nfdrs4.CFuelModelParams_setMXD(self, mxd)

    def setHD(self, hd):
        return _nfdrs4.CFuelModelParams_setHD(self, hd)

    def setSCM(self, scm):
        return _nfdrs4.CFuelModelParams_setSCM(self, scm)

    def setLDrought(self, ldrought):
        return _nfdrs4.CFuelModelParams_setLDrought(self, ldrought)

    def setWNDFC(self, wndfc):
        return _nfdrs4.CFuelModelParams_setWNDFC(self, wndfc)
CFuelModelParams_swigregister = _nfdrs4.CFuelModelParams_swigregister
CFuelModelParams_swigregister(CFuelModelParams)

class NFDRS4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NFDRS4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NFDRS4, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nfdrs4.new_NFDRS4(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nfdrs4.delete_NFDRS4
    __del__ = lambda self: None

    def CreateFuelModels(self):
        return _nfdrs4.NFDRS4_CreateFuelModels(self)

    def Init(self, Lat, FuelModel, SlopeClass, AvgAnnPrecip, LT, Cure, isAnnual, kbdiThreshold, RegObsHour=13, isReinit=False):
        return _nfdrs4.NFDRS4_Init(self, Lat, FuelModel, SlopeClass, AvgAnnPrecip, LT, Cure, isAnnual, kbdiThreshold, RegObsHour, isReinit)

    def Update(self, *args):
        return _nfdrs4.NFDRS4_Update(self, *args)

    def UpdateDaily(self, Year, Month, Day, Julian, Temp, MinTemp, MaxTemp, RH, MinRH, pcp24, WS, fMC1, fMC10, fMC100, fMC1000, fuelTemp, SnowDay):
        return _nfdrs4.NFDRS4_UpdateDaily(self, Year, Month, Day, Julian, Temp, MinTemp, MaxTemp, RH, MinRH, pcp24, WS, fMC1, fMC10, fMC100, fMC1000, fuelTemp, SnowDay)

    def iSetFuelModel(self, cFM):
        return _nfdrs4.NFDRS4_iSetFuelModel(self, cFM)

    def iSetFuelMoistures(self, fMC1, fMC10, fMC100, fMC1000, fMCWood, fMCHerb, fuelTempC):
        return _nfdrs4.NFDRS4_iSetFuelMoistures(self, fMC1, fMC10, fMC100, fMC1000, fMCWood, fMCHerb, fuelTempC)

    def iCalcIndexes(self, iWS, iSlopeCls, fSC, fERC, fBI, fIC, fGSI=-999, fKBDI=-999):
        return _nfdrs4.NFDRS4_iCalcIndexes(self, iWS, iSlopeCls, fSC, fERC, fBI, fIC, fGSI, fKBDI)

    def iCalcKBDI(self, fPrecipAmt, iMaxTemp, fCummPrecip, iYKBDI, fAvgPrecip):
        return _nfdrs4.NFDRS4_iCalcKBDI(self, fPrecipAmt, iMaxTemp, fCummPrecip, iYKBDI, fAvgPrecip)

    def Cure(self, fGSI=-999, fGreenupThreshold=0.5, fGSIMax=1.0):
        return _nfdrs4.NFDRS4_Cure(self, fGSI, fGreenupThreshold, fGSIMax)

    def SetGSIParams(self, MaxGSI, GreenupThreshold, TminMin=-2.0, TminMax=5.0, VPDMin=900, VPDMax=4100, DaylMin=36000, DaylMax=39600, MAPeriod=21, UseVPDAvg=False, nPrecipDays=30, rtPrecipMin=0.5, rtPrecipMax=1.5, UseRTPrecip=False):
        return _nfdrs4.NFDRS4_SetGSIParams(self, MaxGSI, GreenupThreshold, TminMin, TminMax, VPDMin, VPDMax, DaylMin, DaylMax, MAPeriod, UseVPDAvg, nPrecipDays, rtPrecipMin, rtPrecipMax, UseRTPrecip)

    def SetHerbGSIparams(self, MaxGSI, GreenupThreshold, TminMin=-2.0, TminMax=5.0, VPDMin=900, VPDMax=4100, DaylMin=36000, DaylMax=39600, MAPeriod=21, UseVPDAvg=False, nPrecipDays=30, rtPrecipMin=0.5, rtPrecipMax=1.5, UseRTPrecip=False, herbMin=30.0, herbMax=250.0):
        return _nfdrs4.NFDRS4_SetHerbGSIparams(self, MaxGSI, GreenupThreshold, TminMin, TminMax, VPDMin, VPDMax, DaylMin, DaylMax, MAPeriod, UseVPDAvg, nPrecipDays, rtPrecipMin, rtPrecipMax, UseRTPrecip, herbMin, herbMax)

    def SetWoodyGSIparams(self, MaxGSI, GreenupThreshold, TminMin=-2.0, TminMax=5.0, VPDMin=900, VPDMax=4100, DaylMin=36000, DaylMax=39600, MAPeriod=21, UseVPDAvg=False, nPrecipDays=30, rtPrecipMin=0.5, rtPrecipMax=1.5, UseRTPrecip=False, woodyMin=60.0, woodyMax=200.0):
        return _nfdrs4.NFDRS4_SetWoodyGSIparams(self, MaxGSI, GreenupThreshold, TminMin, TminMax, VPDMin, VPDMax, DaylMin, DaylMax, MAPeriod, UseVPDAvg, nPrecipDays, rtPrecipMin, rtPrecipMax, UseRTPrecip, woodyMin, woodyMax)

    def SetOneHourParams(self, radius, adsorptionRate, maxLocalMoisture, stickDensity, desorptionRate):
        return _nfdrs4.NFDRS4_SetOneHourParams(self, radius, adsorptionRate, maxLocalMoisture, stickDensity, desorptionRate)

    def SetTenHourParams(self, radius, adsorptionRate, maxLocalMoisture, stickDensity, desorptionRate):
        return _nfdrs4.NFDRS4_SetTenHourParams(self, radius, adsorptionRate, maxLocalMoisture, stickDensity, desorptionRate)

    def SetHundredHourParams(self, radius, adsorptionRate, maxLocalMoisture, stickDensity, desorptionRate):
        return _nfdrs4.NFDRS4_SetHundredHourParams(self, radius, adsorptionRate, maxLocalMoisture, stickDensity, desorptionRate)

    def SetThousandHourParams(self, radius, adsorptionRate, maxLocalMoisture, stickDensity, desorptionRate):
        return _nfdrs4.NFDRS4_SetThousandHourParams(self, radius, adsorptionRate, maxLocalMoisture, stickDensity, desorptionRate)

    def Set1HourRadius(self, radius):
        return _nfdrs4.NFDRS4_Set1HourRadius(self, radius)

    def Set1HourAdsorptionRate(self, adsorptionRate):
        return _nfdrs4.NFDRS4_Set1HourAdsorptionRate(self, adsorptionRate)

    def Set1HourStickDensity(self, stickDensity):
        return _nfdrs4.NFDRS4_Set1HourStickDensity(self, stickDensity)

    def Set1HourMaxLocalMoisture(self, maxLocalMoisture):
        return _nfdrs4.NFDRS4_Set1HourMaxLocalMoisture(self, maxLocalMoisture)

    def Set1HourDesorptionRate(self, desorptionRate):
        return _nfdrs4.NFDRS4_Set1HourDesorptionRate(self, desorptionRate)

    def Set10HourRadius(self, radius):
        return _nfdrs4.NFDRS4_Set10HourRadius(self, radius)

    def Set10HourAdsorptionRate(self, adsorptionRate):
        return _nfdrs4.NFDRS4_Set10HourAdsorptionRate(self, adsorptionRate)

    def Set10HourStickDensity(self, stickDensity):
        return _nfdrs4.NFDRS4_Set10HourStickDensity(self, stickDensity)

    def Set10HourMaxLocalMoisture(self, maxLocalMoisture):
        return _nfdrs4.NFDRS4_Set10HourMaxLocalMoisture(self, maxLocalMoisture)

    def Set10HourDesorptionRate(self, desorptionRate):
        return _nfdrs4.NFDRS4_Set10HourDesorptionRate(self, desorptionRate)

    def Set100HourRadius(self, radius):
        return _nfdrs4.NFDRS4_Set100HourRadius(self, radius)

    def Set100HourAdsorptionRate(self, adsorptionRate):
        return _nfdrs4.NFDRS4_Set100HourAdsorptionRate(self, adsorptionRate)

    def Set100HourStickDensity(self, stickDensity):
        return _nfdrs4.NFDRS4_Set100HourStickDensity(self, stickDensity)

    def Set100HourMaxLocalMoisture(self, maxLocalMoisture):
        return _nfdrs4.NFDRS4_Set100HourMaxLocalMoisture(self, maxLocalMoisture)

    def Set100HourDesorptionRate(self, desorptionRate):
        return _nfdrs4.NFDRS4_Set100HourDesorptionRate(self, desorptionRate)

    def Set1000HourRadius(self, radius):
        return _nfdrs4.NFDRS4_Set1000HourRadius(self, radius)

    def Set1000HourAdsorptionRate(self, adsorptionRate):
        return _nfdrs4.NFDRS4_Set1000HourAdsorptionRate(self, adsorptionRate)

    def Set1000HourStickDensity(self, stickDensity):
        return _nfdrs4.NFDRS4_Set1000HourStickDensity(self, stickDensity)

    def Set1000HourMaxLocalMoisture(self, maxLocalMoisture):
        return _nfdrs4.NFDRS4_Set1000HourMaxLocalMoisture(self, maxLocalMoisture)

    def Set1000HourDesorptionRate(self, desorptionRate):
        return _nfdrs4.NFDRS4_Set1000HourDesorptionRate(self, desorptionRate)

    def SetStartKBDI(self, sKBDI):
        return _nfdrs4.NFDRS4_SetStartKBDI(self, sKBDI)

    def GetStartKBDI(self):
        return _nfdrs4.NFDRS4_GetStartKBDI(self)

    def SetSCMax(self, maxSC):
        return _nfdrs4.NFDRS4_SetSCMax(self, maxSC)

    def GetSCMax(self):
        return _nfdrs4.NFDRS4_GetSCMax(self)

    def SetMXD(self, mxd):
        return _nfdrs4.NFDRS4_SetMXD(self, mxd)

    def GetMXD(self):
        return _nfdrs4.NFDRS4_GetMXD(self)

    def GetFuelTemperature(self):
        return _nfdrs4.NFDRS4_GetFuelTemperature(self)

    def GetXDaysPrecipitation(self, nDays):
        return _nfdrs4.NFDRS4_GetXDaysPrecipitation(self, nDays)

    def ReadState(self, fileName):
        return _nfdrs4.NFDRS4_ReadState(self, fileName)

    def SaveState(self, fileName):
        return _nfdrs4.NFDRS4_SaveState(self, fileName)

    def LoadState(self, state):
        return _nfdrs4.NFDRS4_LoadState(self, state)
    __swig_getmethods__["nPrecipQueueDays"] = _nfdrs4.NFDRS4_nPrecipQueueDays_get
    if _newclass:
        nPrecipQueueDays = _swig_property(_nfdrs4.NFDRS4_nPrecipQueueDays_get)
    __swig_getmethods__["nHoursPerDay"] = _nfdrs4.NFDRS4_nHoursPerDay_get
    if _newclass:
        nHoursPerDay = _swig_property(_nfdrs4.NFDRS4_nHoursPerDay_get)

    def GetMinTemp(self):
        return _nfdrs4.NFDRS4_GetMinTemp(self)

    def GetMaxTemp(self):
        return _nfdrs4.NFDRS4_GetMaxTemp(self)

    def GetMinRH(self):
        return _nfdrs4.NFDRS4_GetMinRH(self)

    def GetPcp24(self):
        return _nfdrs4.NFDRS4_GetPcp24(self)

    def AddCustomFuel(self, fmParams):
        return _nfdrs4.NFDRS4_AddCustomFuel(self, fmParams)
    __swig_setmethods__["CTA"] = _nfdrs4.NFDRS4_CTA_set
    __swig_getmethods__["CTA"] = _nfdrs4.NFDRS4_CTA_get
    if _newclass:
        CTA = _swig_property(_nfdrs4.NFDRS4_CTA_get, _nfdrs4.NFDRS4_CTA_set)
    __swig_setmethods__["Lat"] = _nfdrs4.NFDRS4_Lat_set
    __swig_getmethods__["Lat"] = _nfdrs4.NFDRS4_Lat_get
    if _newclass:
        Lat = _swig_property(_nfdrs4.NFDRS4_Lat_get, _nfdrs4.NFDRS4_Lat_set)
    __swig_setmethods__["NFDRSVersion"] = _nfdrs4.NFDRS4_NFDRSVersion_set
    __swig_getmethods__["NFDRSVersion"] = _nfdrs4.NFDRS4_NFDRSVersion_get
    if _newclass:
        NFDRSVersion = _swig_property(_nfdrs4.NFDRS4_NFDRSVersion_get, _nfdrs4.NFDRS4_NFDRSVersion_set)
    __swig_setmethods__["YesterdayJDay"] = _nfdrs4.NFDRS4_YesterdayJDay_set
    __swig_getmethods__["YesterdayJDay"] = _nfdrs4.NFDRS4_YesterdayJDay_get
    if _newclass:
        YesterdayJDay = _swig_property(_nfdrs4.NFDRS4_YesterdayJDay_get, _nfdrs4.NFDRS4_YesterdayJDay_set)
    __swig_setmethods__["SlopeClass"] = _nfdrs4.NFDRS4_SlopeClass_set
    __swig_getmethods__["SlopeClass"] = _nfdrs4.NFDRS4_SlopeClass_get
    if _newclass:
        SlopeClass = _swig_property(_nfdrs4.NFDRS4_SlopeClass_get, _nfdrs4.NFDRS4_SlopeClass_set)
    __swig_setmethods__["OneHourFM"] = _nfdrs4.NFDRS4_OneHourFM_set
    __swig_getmethods__["OneHourFM"] = _nfdrs4.NFDRS4_OneHourFM_get
    if _newclass:
        OneHourFM = _swig_property(_nfdrs4.NFDRS4_OneHourFM_get, _nfdrs4.NFDRS4_OneHourFM_set)
    __swig_setmethods__["TenHourFM"] = _nfdrs4.NFDRS4_TenHourFM_set
    __swig_getmethods__["TenHourFM"] = _nfdrs4.NFDRS4_TenHourFM_get
    if _newclass:
        TenHourFM = _swig_property(_nfdrs4.NFDRS4_TenHourFM_get, _nfdrs4.NFDRS4_TenHourFM_set)
    __swig_setmethods__["HundredHourFM"] = _nfdrs4.NFDRS4_HundredHourFM_set
    __swig_getmethods__["HundredHourFM"] = _nfdrs4.NFDRS4_HundredHourFM_get
    if _newclass:
        HundredHourFM = _swig_property(_nfdrs4.NFDRS4_HundredHourFM_get, _nfdrs4.NFDRS4_HundredHourFM_set)
    __swig_setmethods__["ThousandHourFM"] = _nfdrs4.NFDRS4_ThousandHourFM_set
    __swig_getmethods__["ThousandHourFM"] = _nfdrs4.NFDRS4_ThousandHourFM_get
    if _newclass:
        ThousandHourFM = _swig_property(_nfdrs4.NFDRS4_ThousandHourFM_get, _nfdrs4.NFDRS4_ThousandHourFM_set)
    __swig_setmethods__["HerbFM"] = _nfdrs4.NFDRS4_HerbFM_set
    __swig_getmethods__["HerbFM"] = _nfdrs4.NFDRS4_HerbFM_get
    if _newclass:
        HerbFM = _swig_property(_nfdrs4.NFDRS4_HerbFM_get, _nfdrs4.NFDRS4_HerbFM_set)
    __swig_setmethods__["WoodyFM"] = _nfdrs4.NFDRS4_WoodyFM_set
    __swig_getmethods__["WoodyFM"] = _nfdrs4.NFDRS4_WoodyFM_get
    if _newclass:
        WoodyFM = _swig_property(_nfdrs4.NFDRS4_WoodyFM_get, _nfdrs4.NFDRS4_WoodyFM_set)
    __swig_setmethods__["FuelModel"] = _nfdrs4.NFDRS4_FuelModel_set
    __swig_getmethods__["FuelModel"] = _nfdrs4.NFDRS4_FuelModel_get
    if _newclass:
        FuelModel = _swig_property(_nfdrs4.NFDRS4_FuelModel_get, _nfdrs4.NFDRS4_FuelModel_set)
    __swig_setmethods__["FuelDescription"] = _nfdrs4.NFDRS4_FuelDescription_set
    __swig_getmethods__["FuelDescription"] = _nfdrs4.NFDRS4_FuelDescription_get
    if _newclass:
        FuelDescription = _swig_property(_nfdrs4.NFDRS4_FuelDescription_get, _nfdrs4.NFDRS4_FuelDescription_set)
    __swig_setmethods__["SG1"] = _nfdrs4.NFDRS4_SG1_set
    __swig_getmethods__["SG1"] = _nfdrs4.NFDRS4_SG1_get
    if _newclass:
        SG1 = _swig_property(_nfdrs4.NFDRS4_SG1_get, _nfdrs4.NFDRS4_SG1_set)
    __swig_setmethods__["SG10"] = _nfdrs4.NFDRS4_SG10_set
    __swig_getmethods__["SG10"] = _nfdrs4.NFDRS4_SG10_get
    if _newclass:
        SG10 = _swig_property(_nfdrs4.NFDRS4_SG10_get, _nfdrs4.NFDRS4_SG10_set)
    __swig_setmethods__["SG100"] = _nfdrs4.NFDRS4_SG100_set
    __swig_getmethods__["SG100"] = _nfdrs4.NFDRS4_SG100_get
    if _newclass:
        SG100 = _swig_property(_nfdrs4.NFDRS4_SG100_get, _nfdrs4.NFDRS4_SG100_set)
    __swig_setmethods__["SG1000"] = _nfdrs4.NFDRS4_SG1000_set
    __swig_getmethods__["SG1000"] = _nfdrs4.NFDRS4_SG1000_get
    if _newclass:
        SG1000 = _swig_property(_nfdrs4.NFDRS4_SG1000_get, _nfdrs4.NFDRS4_SG1000_set)
    __swig_setmethods__["SGWOOD"] = _nfdrs4.NFDRS4_SGWOOD_set
    __swig_getmethods__["SGWOOD"] = _nfdrs4.NFDRS4_SGWOOD_get
    if _newclass:
        SGWOOD = _swig_property(_nfdrs4.NFDRS4_SGWOOD_get, _nfdrs4.NFDRS4_SGWOOD_set)
    __swig_setmethods__["SGHERB"] = _nfdrs4.NFDRS4_SGHERB_set
    __swig_getmethods__["SGHERB"] = _nfdrs4.NFDRS4_SGHERB_get
    if _newclass:
        SGHERB = _swig_property(_nfdrs4.NFDRS4_SGHERB_get, _nfdrs4.NFDRS4_SGHERB_set)
    __swig_setmethods__["W1"] = _nfdrs4.NFDRS4_W1_set
    __swig_getmethods__["W1"] = _nfdrs4.NFDRS4_W1_get
    if _newclass:
        W1 = _swig_property(_nfdrs4.NFDRS4_W1_get, _nfdrs4.NFDRS4_W1_set)
    __swig_setmethods__["W10"] = _nfdrs4.NFDRS4_W10_set
    __swig_getmethods__["W10"] = _nfdrs4.NFDRS4_W10_get
    if _newclass:
        W10 = _swig_property(_nfdrs4.NFDRS4_W10_get, _nfdrs4.NFDRS4_W10_set)
    __swig_setmethods__["W100"] = _nfdrs4.NFDRS4_W100_set
    __swig_getmethods__["W100"] = _nfdrs4.NFDRS4_W100_get
    if _newclass:
        W100 = _swig_property(_nfdrs4.NFDRS4_W100_get, _nfdrs4.NFDRS4_W100_set)
    __swig_setmethods__["W1000"] = _nfdrs4.NFDRS4_W1000_set
    __swig_getmethods__["W1000"] = _nfdrs4.NFDRS4_W1000_get
    if _newclass:
        W1000 = _swig_property(_nfdrs4.NFDRS4_W1000_get, _nfdrs4.NFDRS4_W1000_set)
    __swig_setmethods__["WWOOD"] = _nfdrs4.NFDRS4_WWOOD_set
    __swig_getmethods__["WWOOD"] = _nfdrs4.NFDRS4_WWOOD_get
    if _newclass:
        WWOOD = _swig_property(_nfdrs4.NFDRS4_WWOOD_get, _nfdrs4.NFDRS4_WWOOD_set)
    __swig_setmethods__["WHERB"] = _nfdrs4.NFDRS4_WHERB_set
    __swig_getmethods__["WHERB"] = _nfdrs4.NFDRS4_WHERB_get
    if _newclass:
        WHERB = _swig_property(_nfdrs4.NFDRS4_WHERB_get, _nfdrs4.NFDRS4_WHERB_set)
    __swig_setmethods__["WDROUGHT"] = _nfdrs4.NFDRS4_WDROUGHT_set
    __swig_getmethods__["WDROUGHT"] = _nfdrs4.NFDRS4_WDROUGHT_get
    if _newclass:
        WDROUGHT = _swig_property(_nfdrs4.NFDRS4_WDROUGHT_get, _nfdrs4.NFDRS4_WDROUGHT_set)
    __swig_setmethods__["W1P"] = _nfdrs4.NFDRS4_W1P_set
    __swig_getmethods__["W1P"] = _nfdrs4.NFDRS4_W1P_get
    if _newclass:
        W1P = _swig_property(_nfdrs4.NFDRS4_W1P_get, _nfdrs4.NFDRS4_W1P_set)
    __swig_setmethods__["WHERBP"] = _nfdrs4.NFDRS4_WHERBP_set
    __swig_getmethods__["WHERBP"] = _nfdrs4.NFDRS4_WHERBP_get
    if _newclass:
        WHERBP = _swig_property(_nfdrs4.NFDRS4_WHERBP_get, _nfdrs4.NFDRS4_WHERBP_set)
    __swig_setmethods__["WTOT"] = _nfdrs4.NFDRS4_WTOT_set
    __swig_getmethods__["WTOT"] = _nfdrs4.NFDRS4_WTOT_get
    if _newclass:
        WTOT = _swig_property(_nfdrs4.NFDRS4_WTOT_get, _nfdrs4.NFDRS4_WTOT_set)
    __swig_setmethods__["L1"] = _nfdrs4.NFDRS4_L1_set
    __swig_getmethods__["L1"] = _nfdrs4.NFDRS4_L1_get
    if _newclass:
        L1 = _swig_property(_nfdrs4.NFDRS4_L1_get, _nfdrs4.NFDRS4_L1_set)
    __swig_setmethods__["L10"] = _nfdrs4.NFDRS4_L10_set
    __swig_getmethods__["L10"] = _nfdrs4.NFDRS4_L10_get
    if _newclass:
        L10 = _swig_property(_nfdrs4.NFDRS4_L10_get, _nfdrs4.NFDRS4_L10_set)
    __swig_setmethods__["L100"] = _nfdrs4.NFDRS4_L100_set
    __swig_getmethods__["L100"] = _nfdrs4.NFDRS4_L100_get
    if _newclass:
        L100 = _swig_property(_nfdrs4.NFDRS4_L100_get, _nfdrs4.NFDRS4_L100_set)
    __swig_setmethods__["L1000"] = _nfdrs4.NFDRS4_L1000_set
    __swig_getmethods__["L1000"] = _nfdrs4.NFDRS4_L1000_get
    if _newclass:
        L1000 = _swig_property(_nfdrs4.NFDRS4_L1000_get, _nfdrs4.NFDRS4_L1000_set)
    __swig_setmethods__["LWOOD"] = _nfdrs4.NFDRS4_LWOOD_set
    __swig_getmethods__["LWOOD"] = _nfdrs4.NFDRS4_LWOOD_get
    if _newclass:
        LWOOD = _swig_property(_nfdrs4.NFDRS4_LWOOD_get, _nfdrs4.NFDRS4_LWOOD_set)
    __swig_setmethods__["LHERB"] = _nfdrs4.NFDRS4_LHERB_set
    __swig_getmethods__["LHERB"] = _nfdrs4.NFDRS4_LHERB_get
    if _newclass:
        LHERB = _swig_property(_nfdrs4.NFDRS4_LHERB_get, _nfdrs4.NFDRS4_LHERB_set)
    __swig_setmethods__["LDROUGHT"] = _nfdrs4.NFDRS4_LDROUGHT_set
    __swig_getmethods__["LDROUGHT"] = _nfdrs4.NFDRS4_LDROUGHT_get
    if _newclass:
        LDROUGHT = _swig_property(_nfdrs4.NFDRS4_LDROUGHT_get, _nfdrs4.NFDRS4_LDROUGHT_set)
    __swig_setmethods__["DroughtUnit"] = _nfdrs4.NFDRS4_DroughtUnit_set
    __swig_getmethods__["DroughtUnit"] = _nfdrs4.NFDRS4_DroughtUnit_get
    if _newclass:
        DroughtUnit = _swig_property(_nfdrs4.NFDRS4_DroughtUnit_get, _nfdrs4.NFDRS4_DroughtUnit_set)
    __swig_setmethods__["fctCur"] = _nfdrs4.NFDRS4_fctCur_set
    __swig_getmethods__["fctCur"] = _nfdrs4.NFDRS4_fctCur_get
    if _newclass:
        fctCur = _swig_property(_nfdrs4.NFDRS4_fctCur_get, _nfdrs4.NFDRS4_fctCur_set)
    __swig_setmethods__["DEPTH"] = _nfdrs4.NFDRS4_DEPTH_set
    __swig_getmethods__["DEPTH"] = _nfdrs4.NFDRS4_DEPTH_get
    if _newclass:
        DEPTH = _swig_property(_nfdrs4.NFDRS4_DEPTH_get, _nfdrs4.NFDRS4_DEPTH_set)
    __swig_setmethods__["WNDFC"] = _nfdrs4.NFDRS4_WNDFC_set
    __swig_getmethods__["WNDFC"] = _nfdrs4.NFDRS4_WNDFC_get
    if _newclass:
        WNDFC = _swig_property(_nfdrs4.NFDRS4_WNDFC_get, _nfdrs4.NFDRS4_WNDFC_set)
    __swig_setmethods__["MXD"] = _nfdrs4.NFDRS4_MXD_set
    __swig_getmethods__["MXD"] = _nfdrs4.NFDRS4_MXD_get
    if _newclass:
        MXD = _swig_property(_nfdrs4.NFDRS4_MXD_get, _nfdrs4.NFDRS4_MXD_set)
    __swig_setmethods__["HD"] = _nfdrs4.NFDRS4_HD_set
    __swig_getmethods__["HD"] = _nfdrs4.NFDRS4_HD_get
    if _newclass:
        HD = _swig_property(_nfdrs4.NFDRS4_HD_get, _nfdrs4.NFDRS4_HD_set)
    __swig_setmethods__["SCM"] = _nfdrs4.NFDRS4_SCM_set
    __swig_getmethods__["SCM"] = _nfdrs4.NFDRS4_SCM_get
    if _newclass:
        SCM = _swig_property(_nfdrs4.NFDRS4_SCM_get, _nfdrs4.NFDRS4_SCM_set)
    __swig_setmethods__["MC1"] = _nfdrs4.NFDRS4_MC1_set
    __swig_getmethods__["MC1"] = _nfdrs4.NFDRS4_MC1_get
    if _newclass:
        MC1 = _swig_property(_nfdrs4.NFDRS4_MC1_get, _nfdrs4.NFDRS4_MC1_set)
    __swig_setmethods__["MC10"] = _nfdrs4.NFDRS4_MC10_set
    __swig_getmethods__["MC10"] = _nfdrs4.NFDRS4_MC10_get
    if _newclass:
        MC10 = _swig_property(_nfdrs4.NFDRS4_MC10_get, _nfdrs4.NFDRS4_MC10_set)
    __swig_setmethods__["MC100"] = _nfdrs4.NFDRS4_MC100_set
    __swig_getmethods__["MC100"] = _nfdrs4.NFDRS4_MC100_get
    if _newclass:
        MC100 = _swig_property(_nfdrs4.NFDRS4_MC100_get, _nfdrs4.NFDRS4_MC100_set)
    __swig_setmethods__["MC1000"] = _nfdrs4.NFDRS4_MC1000_set
    __swig_getmethods__["MC1000"] = _nfdrs4.NFDRS4_MC1000_get
    if _newclass:
        MC1000 = _swig_property(_nfdrs4.NFDRS4_MC1000_get, _nfdrs4.NFDRS4_MC1000_set)
    __swig_setmethods__["MCWOOD"] = _nfdrs4.NFDRS4_MCWOOD_set
    __swig_getmethods__["MCWOOD"] = _nfdrs4.NFDRS4_MCWOOD_get
    if _newclass:
        MCWOOD = _swig_property(_nfdrs4.NFDRS4_MCWOOD_get, _nfdrs4.NFDRS4_MCWOOD_set)
    __swig_setmethods__["MCHERB"] = _nfdrs4.NFDRS4_MCHERB_set
    __swig_getmethods__["MCHERB"] = _nfdrs4.NFDRS4_MCHERB_get
    if _newclass:
        MCHERB = _swig_property(_nfdrs4.NFDRS4_MCHERB_get, _nfdrs4.NFDRS4_MCHERB_set)
    __swig_setmethods__["BI"] = _nfdrs4.NFDRS4_BI_set
    __swig_getmethods__["BI"] = _nfdrs4.NFDRS4_BI_get
    if _newclass:
        BI = _swig_property(_nfdrs4.NFDRS4_BI_get, _nfdrs4.NFDRS4_BI_set)
    __swig_setmethods__["ERC"] = _nfdrs4.NFDRS4_ERC_set
    __swig_getmethods__["ERC"] = _nfdrs4.NFDRS4_ERC_get
    if _newclass:
        ERC = _swig_property(_nfdrs4.NFDRS4_ERC_get, _nfdrs4.NFDRS4_ERC_set)
    __swig_setmethods__["SC"] = _nfdrs4.NFDRS4_SC_set
    __swig_getmethods__["SC"] = _nfdrs4.NFDRS4_SC_get
    if _newclass:
        SC = _swig_property(_nfdrs4.NFDRS4_SC_get, _nfdrs4.NFDRS4_SC_set)
    __swig_setmethods__["IC"] = _nfdrs4.NFDRS4_IC_set
    __swig_getmethods__["IC"] = _nfdrs4.NFDRS4_IC_get
    if _newclass:
        IC = _swig_property(_nfdrs4.NFDRS4_IC_get, _nfdrs4.NFDRS4_IC_set)
    __swig_setmethods__["PrevYear"] = _nfdrs4.NFDRS4_PrevYear_set
    __swig_getmethods__["PrevYear"] = _nfdrs4.NFDRS4_PrevYear_get
    if _newclass:
        PrevYear = _swig_property(_nfdrs4.NFDRS4_PrevYear_get, _nfdrs4.NFDRS4_PrevYear_set)
    __swig_setmethods__["KBDI"] = _nfdrs4.NFDRS4_KBDI_set
    __swig_getmethods__["KBDI"] = _nfdrs4.NFDRS4_KBDI_get
    if _newclass:
        KBDI = _swig_property(_nfdrs4.NFDRS4_KBDI_get, _nfdrs4.NFDRS4_KBDI_set)
    __swig_setmethods__["YKBDI"] = _nfdrs4.NFDRS4_YKBDI_set
    __swig_getmethods__["YKBDI"] = _nfdrs4.NFDRS4_YKBDI_get
    if _newclass:
        YKBDI = _swig_property(_nfdrs4.NFDRS4_YKBDI_get, _nfdrs4.NFDRS4_YKBDI_set)
    __swig_setmethods__["StartKBDI"] = _nfdrs4.NFDRS4_StartKBDI_set
    __swig_getmethods__["StartKBDI"] = _nfdrs4.NFDRS4_StartKBDI_get
    if _newclass:
        StartKBDI = _swig_property(_nfdrs4.NFDRS4_StartKBDI_get, _nfdrs4.NFDRS4_StartKBDI_set)
    __swig_setmethods__["KBDIThreshold"] = _nfdrs4.NFDRS4_KBDIThreshold_set
    __swig_getmethods__["KBDIThreshold"] = _nfdrs4.NFDRS4_KBDIThreshold_get
    if _newclass:
        KBDIThreshold = _swig_property(_nfdrs4.NFDRS4_KBDIThreshold_get, _nfdrs4.NFDRS4_KBDIThreshold_set)
    __swig_setmethods__["CummPrecip"] = _nfdrs4.NFDRS4_CummPrecip_set
    __swig_getmethods__["CummPrecip"] = _nfdrs4.NFDRS4_CummPrecip_get
    if _newclass:
        CummPrecip = _swig_property(_nfdrs4.NFDRS4_CummPrecip_get, _nfdrs4.NFDRS4_CummPrecip_set)
    __swig_setmethods__["AvgPrecip"] = _nfdrs4.NFDRS4_AvgPrecip_set
    __swig_getmethods__["AvgPrecip"] = _nfdrs4.NFDRS4_AvgPrecip_get
    if _newclass:
        AvgPrecip = _swig_property(_nfdrs4.NFDRS4_AvgPrecip_get, _nfdrs4.NFDRS4_AvgPrecip_set)
    __swig_setmethods__["UseLoadTransfer"] = _nfdrs4.NFDRS4_UseLoadTransfer_set
    __swig_getmethods__["UseLoadTransfer"] = _nfdrs4.NFDRS4_UseLoadTransfer_get
    if _newclass:
        UseLoadTransfer = _swig_property(_nfdrs4.NFDRS4_UseLoadTransfer_get, _nfdrs4.NFDRS4_UseLoadTransfer_set)
    __swig_setmethods__["UseCuring"] = _nfdrs4.NFDRS4_UseCuring_set
    __swig_getmethods__["UseCuring"] = _nfdrs4.NFDRS4_UseCuring_get
    if _newclass:
        UseCuring = _swig_property(_nfdrs4.NFDRS4_UseCuring_get, _nfdrs4.NFDRS4_UseCuring_set)
    __swig_setmethods__["SnowCovered"] = _nfdrs4.NFDRS4_SnowCovered_set
    __swig_getmethods__["SnowCovered"] = _nfdrs4.NFDRS4_SnowCovered_get
    if _newclass:
        SnowCovered = _swig_property(_nfdrs4.NFDRS4_SnowCovered_get, _nfdrs4.NFDRS4_SnowCovered_set)
    __swig_setmethods__["WTMCD"] = _nfdrs4.NFDRS4_WTMCD_set
    __swig_getmethods__["WTMCD"] = _nfdrs4.NFDRS4_WTMCD_get
    if _newclass:
        WTMCD = _swig_property(_nfdrs4.NFDRS4_WTMCD_get, _nfdrs4.NFDRS4_WTMCD_set)
    __swig_setmethods__["WTMCL"] = _nfdrs4.NFDRS4_WTMCL_set
    __swig_getmethods__["WTMCL"] = _nfdrs4.NFDRS4_WTMCL_get
    if _newclass:
        WTMCL = _swig_property(_nfdrs4.NFDRS4_WTMCL_get, _nfdrs4.NFDRS4_WTMCL_set)
    __swig_setmethods__["WTMCDE"] = _nfdrs4.NFDRS4_WTMCDE_set
    __swig_getmethods__["WTMCDE"] = _nfdrs4.NFDRS4_WTMCDE_get
    if _newclass:
        WTMCDE = _swig_property(_nfdrs4.NFDRS4_WTMCDE_get, _nfdrs4.NFDRS4_WTMCDE_set)
    __swig_setmethods__["WTMCLE"] = _nfdrs4.NFDRS4_WTMCLE_set
    __swig_getmethods__["WTMCLE"] = _nfdrs4.NFDRS4_WTMCLE_get
    if _newclass:
        WTMCLE = _swig_property(_nfdrs4.NFDRS4_WTMCLE_get, _nfdrs4.NFDRS4_WTMCLE_set)
    __swig_setmethods__["FuelTemperature"] = _nfdrs4.NFDRS4_FuelTemperature_set
    __swig_getmethods__["FuelTemperature"] = _nfdrs4.NFDRS4_FuelTemperature_get
    if _newclass:
        FuelTemperature = _swig_property(_nfdrs4.NFDRS4_FuelTemperature_get, _nfdrs4.NFDRS4_FuelTemperature_set)
    __swig_setmethods__["m_GSI"] = _nfdrs4.NFDRS4_m_GSI_set
    __swig_getmethods__["m_GSI"] = _nfdrs4.NFDRS4_m_GSI_get
    if _newclass:
        m_GSI = _swig_property(_nfdrs4.NFDRS4_m_GSI_get, _nfdrs4.NFDRS4_m_GSI_set)
    __swig_setmethods__["nConsectiveSnowDays"] = _nfdrs4.NFDRS4_nConsectiveSnowDays_set
    __swig_getmethods__["nConsectiveSnowDays"] = _nfdrs4.NFDRS4_nConsectiveSnowDays_get
    if _newclass:
        nConsectiveSnowDays = _swig_property(_nfdrs4.NFDRS4_nConsectiveSnowDays_get, _nfdrs4.NFDRS4_nConsectiveSnowDays_set)
    __swig_setmethods__["m_regObsHour"] = _nfdrs4.NFDRS4_m_regObsHour_set
    __swig_getmethods__["m_regObsHour"] = _nfdrs4.NFDRS4_m_regObsHour_get
    if _newclass:
        m_regObsHour = _swig_property(_nfdrs4.NFDRS4_m_regObsHour_get, _nfdrs4.NFDRS4_m_regObsHour_set)
    __swig_setmethods__["utcHourDiff"] = _nfdrs4.NFDRS4_utcHourDiff_set
    __swig_getmethods__["utcHourDiff"] = _nfdrs4.NFDRS4_utcHourDiff_get
    if _newclass:
        utcHourDiff = _swig_property(_nfdrs4.NFDRS4_utcHourDiff_get, _nfdrs4.NFDRS4_utcHourDiff_set)
    __swig_setmethods__["lastUtcUpdateTime"] = _nfdrs4.NFDRS4_lastUtcUpdateTime_set
    __swig_getmethods__["lastUtcUpdateTime"] = _nfdrs4.NFDRS4_lastUtcUpdateTime_get
    if _newclass:
        lastUtcUpdateTime = _swig_property(_nfdrs4.NFDRS4_lastUtcUpdateTime_get, _nfdrs4.NFDRS4_lastUtcUpdateTime_set)
    __swig_setmethods__["lastDailyUpdateTime"] = _nfdrs4.NFDRS4_lastDailyUpdateTime_set
    __swig_getmethods__["lastDailyUpdateTime"] = _nfdrs4.NFDRS4_lastDailyUpdateTime_get
    if _newclass:
        lastDailyUpdateTime = _swig_property(_nfdrs4.NFDRS4_lastDailyUpdateTime_get, _nfdrs4.NFDRS4_lastDailyUpdateTime_set)
    __swig_setmethods__["qPrecip"] = _nfdrs4.NFDRS4_qPrecip_set
    __swig_getmethods__["qPrecip"] = _nfdrs4.NFDRS4_qPrecip_get
    if _newclass:
        qPrecip = _swig_property(_nfdrs4.NFDRS4_qPrecip_get, _nfdrs4.NFDRS4_qPrecip_set)
    __swig_setmethods__["qHourlyPrecip"] = _nfdrs4.NFDRS4_qHourlyPrecip_set
    __swig_getmethods__["qHourlyPrecip"] = _nfdrs4.NFDRS4_qHourlyPrecip_get
    if _newclass:
        qHourlyPrecip = _swig_property(_nfdrs4.NFDRS4_qHourlyPrecip_get, _nfdrs4.NFDRS4_qHourlyPrecip_set)
    __swig_setmethods__["qHourlyTemp"] = _nfdrs4.NFDRS4_qHourlyTemp_set
    __swig_getmethods__["qHourlyTemp"] = _nfdrs4.NFDRS4_qHourlyTemp_get
    if _newclass:
        qHourlyTemp = _swig_property(_nfdrs4.NFDRS4_qHourlyTemp_get, _nfdrs4.NFDRS4_qHourlyTemp_set)
    __swig_setmethods__["qHourlyRH"] = _nfdrs4.NFDRS4_qHourlyRH_set
    __swig_getmethods__["qHourlyRH"] = _nfdrs4.NFDRS4_qHourlyRH_get
    if _newclass:
        qHourlyRH = _swig_property(_nfdrs4.NFDRS4_qHourlyRH_get, _nfdrs4.NFDRS4_qHourlyRH_set)
    __swig_setmethods__["mapFuels"] = _nfdrs4.NFDRS4_mapFuels_set
    __swig_getmethods__["mapFuels"] = _nfdrs4.NFDRS4_mapFuels_get
    if _newclass:
        mapFuels = _swig_property(_nfdrs4.NFDRS4_mapFuels_get, _nfdrs4.NFDRS4_mapFuels_set)
NFDRS4_swigregister = _nfdrs4.NFDRS4_swigregister
NFDRS4_swigregister(NFDRS4)

class UTCTimeException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UTCTimeException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UTCTimeException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nfdrs4.new_UTCTimeException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nfdrs4.delete_UTCTimeException
    __del__ = lambda self: None

    def what(self):
        return _nfdrs4.UTCTimeException_what(self)
UTCTimeException_swigregister = _nfdrs4.UTCTimeException_swigregister
UTCTimeException_swigregister(UTCTimeException)

class bad_time_init(UTCTimeException):
    __swig_setmethods__ = {}
    for _s in [UTCTimeException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, bad_time_init, name, value)
    __swig_getmethods__ = {}
    for _s in [UTCTimeException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, bad_time_init, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _nfdrs4.new_bad_time_init()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nfdrs4.delete_bad_time_init
    __del__ = lambda self: None
bad_time_init_swigregister = _nfdrs4.bad_time_init_swigregister
bad_time_init_swigregister(bad_time_init)

class bad_time(UTCTimeException):
    __swig_setmethods__ = {}
    for _s in [UTCTimeException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, bad_time, name, value)
    __swig_getmethods__ = {}
    for _s in [UTCTimeException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, bad_time, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _nfdrs4.new_bad_time()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nfdrs4.delete_bad_time
    __del__ = lambda self: None
bad_time_swigregister = _nfdrs4.bad_time_swigregister
bad_time_swigregister(bad_time)

class invalid_date(UTCTimeException):
    __swig_setmethods__ = {}
    for _s in [UTCTimeException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, invalid_date, name, value)
    __swig_getmethods__ = {}
    for _s in [UTCTimeException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, invalid_date, name)
    __repr__ = _swig_repr

    def __init__(self, msg):
        this = _nfdrs4.new_invalid_date(msg)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nfdrs4.delete_invalid_date
    __del__ = lambda self: None
invalid_date_swigregister = _nfdrs4.invalid_date_swigregister
invalid_date_swigregister(invalid_date)


def validate_date(year, month, day, hour, minute, second):
    return _nfdrs4.validate_date(year, month, day, hour, minute, second)
validate_date = _nfdrs4.validate_date

def get_day_diff():
    return _nfdrs4.get_day_diff()
get_day_diff = _nfdrs4.get_day_diff

def get_hour_diff():
    return _nfdrs4.get_hour_diff()
get_hour_diff = _nfdrs4.get_hour_diff

def get_sec_diff():
    return _nfdrs4.get_sec_diff()
get_sec_diff = _nfdrs4.get_sec_diff

def tm_compare(first, second):
    return _nfdrs4.tm_compare(first, second)
tm_compare = _nfdrs4.tm_compare

def tm_intraday_secs_diff(first, second):
    return _nfdrs4.tm_intraday_secs_diff(first, second)
tm_intraday_secs_diff = _nfdrs4.tm_intraday_secs_diff

def is_leap_year(year):
    return _nfdrs4.is_leap_year(year)
is_leap_year = _nfdrs4.is_leap_year

def tm_increment_day(changing_tm, quantity=1):
    return _nfdrs4.tm_increment_day(changing_tm, quantity)
tm_increment_day = _nfdrs4.tm_increment_day

def tm_increment_hour(changing_tm, quantity=1):
    return _nfdrs4.tm_increment_hour(changing_tm, quantity)
tm_increment_hour = _nfdrs4.tm_increment_hour

def tm_increment_minute(changing_tm, quantity=1):
    return _nfdrs4.tm_increment_minute(changing_tm, quantity)
tm_increment_minute = _nfdrs4.tm_increment_minute

def tm_increment_second(changing_tm, quantity=1):
    return _nfdrs4.tm_increment_second(changing_tm, quantity)
tm_increment_second = _nfdrs4.tm_increment_second

def tm_decrement_day(changing_tm, quantity=1):
    return _nfdrs4.tm_decrement_day(changing_tm, quantity)
tm_decrement_day = _nfdrs4.tm_decrement_day

def tm_decrement_hour(changing_tm, quantity=1):
    return _nfdrs4.tm_decrement_hour(changing_tm, quantity)
tm_decrement_hour = _nfdrs4.tm_decrement_hour

def tm_decrement_minute(changing_tm, quantity=1):
    return _nfdrs4.tm_decrement_minute(changing_tm, quantity)
tm_decrement_minute = _nfdrs4.tm_decrement_minute

def tm_decrement_second(changing_tm, quantity=1):
    return _nfdrs4.tm_decrement_second(changing_tm, quantity)
tm_decrement_second = _nfdrs4.tm_decrement_second

def check_utc_timestamp(check_time, secs_diff, year, month, day, hour, minute, second):
    return _nfdrs4.check_utc_timestamp(check_time, secs_diff, year, month, day, hour, minute, second)
check_utc_timestamp = _nfdrs4.check_utc_timestamp

def get_utc_timestamp(year, month, day, hour, minute, second):
    return _nfdrs4.get_utc_timestamp(year, month, day, hour, minute, second)
get_utc_timestamp = _nfdrs4.get_utc_timestamp

def get_utc_timestamp_sec_diff(check_time, year, month, day, hour, minute, second):
    return _nfdrs4.get_utc_timestamp_sec_diff(check_time, year, month, day, hour, minute, second)
get_utc_timestamp_sec_diff = _nfdrs4.get_utc_timestamp_sec_diff
class UTCTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UTCTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UTCTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nfdrs4.new_UTCTime(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_tm(self):
        return _nfdrs4.UTCTime_get_tm(self)

    def time_string(self):
        return _nfdrs4.UTCTime_time_string(self)

    def time_string_inet(self):
        return _nfdrs4.UTCTime_time_string_inet(self)

    def timestamp(self):
        return _nfdrs4.UTCTime_timestamp(self)

    def __lt__(self, rhs):
        return _nfdrs4.UTCTime___lt__(self, rhs)

    def __ge__(self, rhs):
        return _nfdrs4.UTCTime___ge__(self, rhs)

    def __gt__(self, rhs):
        return _nfdrs4.UTCTime___gt__(self, rhs)

    def __le__(self, rhs):
        return _nfdrs4.UTCTime___le__(self, rhs)

    def __eq__(self, rhs):
        return _nfdrs4.UTCTime___eq__(self, rhs)

    def __ne__(self, rhs):
        return _nfdrs4.UTCTime___ne__(self, rhs)

    def __sub__(self, rhs):
        return _nfdrs4.UTCTime___sub__(self, rhs)
    __swig_destroy__ = _nfdrs4.delete_UTCTime
    __del__ = lambda self: None
UTCTime_swigregister = _nfdrs4.UTCTime_swigregister
UTCTime_swigregister(UTCTime)

# This file is compatible with both classic and new-style classes.


